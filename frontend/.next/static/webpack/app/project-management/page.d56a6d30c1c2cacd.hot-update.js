"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/project-management/page",{

/***/ "(app-pages-browser)/./src/contexts/AuthContext.tsx":
/*!**************************************!*\
  !*** ./src/contexts/AuthContext.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _utils_serviceAuth__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/serviceAuth */ \"(app-pages-browser)/./src/utils/serviceAuth.ts\");\n/* __next_internal_client_entry_do_not_use__ supabase,AuthProvider,useAuth,default auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Initialize Supabase client\nconst supabaseUrl = \"https://your-project.supabase.co\" || 0;\nconst supabaseAnonKey = \"your_anon_token_here\" || 0;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_3__.createClient)(supabaseUrl, supabaseAnonKey);\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [session, setSession] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [isStable, setIsStable] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Tenant state with demo fallback\n    const [tenant, setTenant] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n        name: 'Demo Company',\n        slug: 'demo-company',\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\n    // Tenant user state with demo fallback\n    const [tenantUser, setTenantUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        id: 'demo-tenant-user-id',\n        tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n        user_id: 'demo-user-id',\n        role: 'client_admin',\n        is_active: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n    });\n    // Computed properties for RBAC\n    const isDemoMode =  false || \"https://your-project.supabase.co\".includes('placeholder');\n    const isAuthenticated = !!user || !!session || isDemoMode;\n    const currentUserId = (user === null || user === void 0 ? void 0 : user.id) || (tenantUser === null || tenantUser === void 0 ? void 0 : tenantUser.user_id) || null;\n    const currentTenantId = (tenant === null || tenant === void 0 ? void 0 : tenant.id) || null;\n    const currentUserRole = (tenantUser === null || tenantUser === void 0 ? void 0 : tenantUser.role) || null;\n    // Helper function to update service auth context\n    const updateServiceAuthContext = ()=>{\n        (0,_utils_serviceAuth__WEBPACK_IMPORTED_MODULE_2__.setServiceAuthContext)({\n            userId: currentUserId,\n            tenantId: currentTenantId,\n            userRole: currentUserRole,\n            isAuthenticated,\n            isDemoMode\n        });\n    };\n    // Initialize authentication state\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            console.log('üîê AuthProvider: Initializing authentication state');\n            const getInitialSession = {\n                \"AuthProvider.useEffect.getInitialSession\": async ()=>{\n                    try {\n                        const { data: { session: initialSession }, error } = await supabase.auth.getSession();\n                        if (error) {\n                            console.error('‚ùå AuthProvider: Error getting session:', error);\n                            // Fall back to demo mode\n                            setUser({\n                                id: 'demo-user-id',\n                                email: 'demo@company.com',\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString(),\n                                app_metadata: {},\n                                user_metadata: {},\n                                aud: 'authenticated',\n                                confirmation_sent_at: new Date().toISOString()\n                            });\n                            setTenantUser({\n                                id: 'demo-tenant-user-id',\n                                tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                                user_id: 'demo-user-id',\n                                role: 'client_admin',\n                                is_active: true,\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString()\n                            });\n                        } else if (initialSession) {\n                            console.log('‚úÖ AuthProvider: Found existing session');\n                            setSession(initialSession);\n                            setUser(initialSession.user);\n                            // Set tenant user for authenticated user\n                            setTenantUser({\n                                id: 'demo-tenant-user-id',\n                                tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                                user_id: initialSession.user.id,\n                                role: 'client_admin',\n                                is_active: true,\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString()\n                            });\n                        } else {\n                            console.log('‚ö†Ô∏è AuthProvider: No existing session, using demo user');\n                            // Fallback to demo user for stability\n                            setUser({\n                                id: 'demo-user-id',\n                                email: 'demo@company.com',\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString(),\n                                app_metadata: {},\n                                user_metadata: {},\n                                aud: 'authenticated',\n                                confirmation_sent_at: new Date().toISOString()\n                            });\n                            // Set demo tenant user\n                            setTenantUser({\n                                id: 'demo-tenant-user-id',\n                                tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                                user_id: 'demo-user-id',\n                                role: 'client_admin',\n                                is_active: true,\n                                created_at: new Date().toISOString(),\n                                updated_at: new Date().toISOString()\n                            });\n                        }\n                        setLoading(false);\n                        setIsStable(true);\n                        updateServiceAuthContext();\n                        console.log('‚úÖ AuthProvider: Authentication state stabilized');\n                    } catch (error) {\n                        console.error('‚ùå AuthProvider: Unexpected error during initialization:', error);\n                        // Ensure we always have a stable state\n                        setUser(null);\n                        setSession(null);\n                        setTenantUser({\n                            id: 'demo-tenant-user-id',\n                            tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                            user_id: 'demo-user-id',\n                            role: 'client_admin',\n                            is_active: true,\n                            created_at: new Date().toISOString(),\n                            updated_at: new Date().toISOString()\n                        });\n                        setLoading(false);\n                        setIsStable(true);\n                        updateServiceAuthContext();\n                    }\n                }\n            }[\"AuthProvider.useEffect.getInitialSession\"];\n            getInitialSession();\n            // Listen for auth changes\n            const { data: { subscription } } = supabase.auth.onAuthStateChange({\n                \"AuthProvider.useEffect\": async (event, newSession)=>{\n                    console.log('üîÑ AuthProvider: Auth state changed:', event);\n                    if (newSession) {\n                        setSession(newSession);\n                        setUser(newSession.user);\n                        // Set tenant user for authenticated user\n                        setTenantUser({\n                            id: 'demo-tenant-user-id',\n                            tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                            user_id: newSession.user.id,\n                            role: 'client_admin',\n                            is_active: true,\n                            created_at: new Date().toISOString(),\n                            updated_at: new Date().toISOString()\n                        });\n                    } else {\n                        console.log('‚ö†Ô∏è AuthProvider: User signed out, falling back to demo user');\n                        // Fallback to demo user for stability\n                        setUser({\n                            id: 'demo-user-id',\n                            email: 'demo@company.com',\n                            created_at: new Date().toISOString(),\n                            updated_at: new Date().toISOString(),\n                            app_metadata: {},\n                            user_metadata: {},\n                            aud: 'authenticated',\n                            confirmation_sent_at: new Date().toISOString()\n                        });\n                        setSession(null);\n                        // Set demo tenant user\n                        setTenantUser({\n                            id: 'demo-tenant-user-id',\n                            tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                            user_id: 'demo-user-id',\n                            role: 'client_admin',\n                            is_active: true,\n                            created_at: new Date().toISOString(),\n                            updated_at: new Date().toISOString()\n                        });\n                    }\n                    setLoading(false);\n                    setIsStable(true);\n                    updateServiceAuthContext();\n                }\n            }[\"AuthProvider.useEffect\"]);\n            return ({\n                \"AuthProvider.useEffect\": ()=>{\n                    subscription.unsubscribe();\n                }\n            })[\"AuthProvider.useEffect\"];\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    const signIn = async (email, password)=>{\n        try {\n            const { error } = await supabase.auth.signInWithPassword({\n                email,\n                password\n            });\n            return {\n                error\n            };\n        } catch (error) {\n            console.error('‚ùå AuthProvider: Sign in error:', error);\n            return {\n                error\n            };\n        }\n    };\n    const signUp = async (email, password)=>{\n        try {\n            const { error } = await supabase.auth.signUp({\n                email,\n                password\n            });\n            return {\n                error\n            };\n        } catch (error) {\n            console.error('‚ùå AuthProvider: Sign up error:', error);\n            return {\n                error\n            };\n        }\n    };\n    const signOut = async ()=>{\n        console.log('üîê AuthProvider: Signing out');\n        try {\n            await supabase.auth.signOut();\n            // Reset to demo state\n            setUser(null);\n            setSession(null);\n            setTenantUser({\n                id: 'demo-tenant-user-id',\n                tenant_id: '54afbd1d-e72a-41e1-9d39-2c8a08a257ff',\n                user_id: 'demo-user-id',\n                role: 'client_admin',\n                is_active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            setLoading(false);\n            setIsStable(true);\n            updateServiceAuthContext();\n            // Redirect to login page\n            if (true) {\n                window.location.href = '/login';\n            }\n        } catch (error) {\n            console.error('‚ùå AuthProvider: Error during sign out:', error);\n            // Still redirect even if there's an error\n            if (true) {\n                window.location.href = '/login';\n            }\n        }\n    };\n    const refreshTenant = async ()=>{\n        console.log('üîÑ AuthProvider: Refreshing tenant information');\n    // In a real implementation, this would fetch fresh tenant data\n    // For now, we maintain the demo state\n    };\n    const refreshSession = async ()=>{\n        console.log('üîÑ AuthProvider: Refreshing session');\n        try {\n            const { data: { session }, error } = await supabase.auth.refreshSession();\n            if (error) {\n                console.error('‚ùå AuthProvider: Error refreshing session:', error);\n            } else {\n                setSession(session);\n                if (session === null || session === void 0 ? void 0 : session.user) {\n                    setUser(session.user);\n                }\n            }\n        } catch (error) {\n            console.error('‚ùå AuthProvider: Unexpected error refreshing session:', error);\n        }\n    };\n    const value = {\n        user,\n        tenant,\n        tenantUser,\n        session,\n        loading,\n        signIn,\n        signUp,\n        signOut,\n        refreshTenant,\n        refreshSession,\n        isStable,\n        isAuthenticated,\n        isDemoMode,\n        currentUserId,\n        currentTenantId,\n        currentUserRole\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/ubuntu/ETLA-Platform/frontend/src/contexts/AuthContext.tsx\",\n        lineNumber: 358,\n        columnNumber: 5\n    }, this);\n}\n_s(AuthProvider, \"YEpTbEL9+YoQBsFfazIctBtacvE=\");\n_c = AuthProvider;\nfunction useAuth() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthContext);\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0cy9BdXRoQ29udGV4dC50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFFaUY7QUFDN0I7QUFFTztBQXVDM0QsTUFBTU0sNEJBQWNOLG9EQUFhQSxDQUE4Qk87QUFFL0QsNkJBQTZCO0FBQzdCLE1BQU1DLGNBQWNDLGtDQUFvQyxJQUFJLENBQTBCO0FBQ3RGLE1BQU1HLGtCQUFrQkgsc0JBQTJDLElBQUksQ0FBVTtBQUUxRSxNQUFNSyxXQUFXVixtRUFBWUEsQ0FBQ0ksYUFBYUksaUJBQWdCO0FBRTNELFNBQVNHLGFBQWEsS0FBcUM7UUFBckMsRUFBRUMsUUFBUSxFQUEyQixHQUFyQzs7SUFDM0IsTUFBTSxDQUFDQyxNQUFNQyxRQUFRLEdBQUdmLCtDQUFRQSxDQUFjO0lBQzlDLE1BQU0sQ0FBQ2dCLFNBQVNDLFdBQVcsR0FBR2pCLCtDQUFRQSxDQUFpQjtJQUN2RCxNQUFNLENBQUNrQixTQUFTQyxXQUFXLEdBQUduQiwrQ0FBUUEsQ0FBQztJQUN2QyxNQUFNLENBQUNvQixVQUFVQyxZQUFZLEdBQUdyQiwrQ0FBUUEsQ0FBQztJQUV6QyxrQ0FBa0M7SUFDbEMsTUFBTSxDQUFDc0IsUUFBUUMsVUFBVSxHQUFHdkIsK0NBQVFBLENBQWdCO1FBQ2xEd0IsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLE1BQU07UUFDTkMsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1FBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7SUFDcEM7SUFFQSx1Q0FBdUM7SUFDdkMsTUFBTSxDQUFDRSxZQUFZQyxjQUFjLEdBQUdoQywrQ0FBUUEsQ0FBb0I7UUFDOUR3QixJQUFJO1FBQ0pTLFdBQVc7UUFDWEMsU0FBUztRQUNUQyxNQUFNO1FBQ05DLFdBQVc7UUFDWFQsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO1FBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7SUFDcEM7SUFFQSwrQkFBK0I7SUFDL0IsTUFBTVEsYUFBYSxNQUNtRSxJQUNuRS9CLGtDQUFvQyxDQUFDZ0MsUUFBUSxDQUFDO0lBQ2pFLE1BQU1DLGtCQUFrQixDQUFDLENBQUN6QixRQUFRLENBQUMsQ0FBQ0UsV0FBV3FCO0lBQy9DLE1BQU1HLGdCQUFnQjFCLENBQUFBLGlCQUFBQSwyQkFBQUEsS0FBTVUsRUFBRSxNQUFJTyx1QkFBQUEsaUNBQUFBLFdBQVlHLE9BQU8sS0FBSTtJQUN6RCxNQUFNTyxrQkFBa0JuQixDQUFBQSxtQkFBQUEsNkJBQUFBLE9BQVFFLEVBQUUsS0FBSTtJQUN0QyxNQUFNa0Isa0JBQWtCWCxDQUFBQSx1QkFBQUEsaUNBQUFBLFdBQVlJLElBQUksS0FBSTtJQUU1QyxpREFBaUQ7SUFDakQsTUFBTVEsMkJBQTJCO1FBQy9CekMseUVBQXFCQSxDQUFDO1lBQ3BCMEMsUUFBUUo7WUFDUkssVUFBVUo7WUFDVkssVUFBVUo7WUFDVkg7WUFDQUY7UUFDRjtJQUNGO0lBRUEsa0NBQWtDO0lBQ2xDdEMsZ0RBQVNBO2tDQUFDO1lBQ1JnRCxRQUFRQyxHQUFHLENBQUM7WUFFWixNQUFNQzs0REFBb0I7b0JBQ3hCLElBQUk7d0JBQ0YsTUFBTSxFQUFFQyxNQUFNLEVBQUVsQyxTQUFTbUMsY0FBYyxFQUFFLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU16QyxTQUFTMEMsSUFBSSxDQUFDQyxVQUFVO3dCQUVuRixJQUFJRixPQUFPOzRCQUNUTCxRQUFRSyxLQUFLLENBQUMsMENBQTBDQTs0QkFDeEQseUJBQXlCOzRCQUN6QnJDLFFBQVE7Z0NBQ05TLElBQUk7Z0NBQ0orQixPQUFPO2dDQUNQNUIsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO2dDQUNsQ0MsWUFBWSxJQUFJRixPQUFPQyxXQUFXO2dDQUNsQzJCLGNBQWMsQ0FBQztnQ0FDZkMsZUFBZSxDQUFDO2dDQUNoQkMsS0FBSztnQ0FDTEMsc0JBQXNCLElBQUkvQixPQUFPQyxXQUFXOzRCQUM5Qzs0QkFFQUcsY0FBYztnQ0FDWlIsSUFBSTtnQ0FDSlMsV0FBVztnQ0FDWEMsU0FBUztnQ0FDVEMsTUFBTTtnQ0FDTkMsV0FBVztnQ0FDWFQsWUFBWSxJQUFJQyxPQUFPQyxXQUFXO2dDQUNsQ0MsWUFBWSxJQUFJRixPQUFPQyxXQUFXOzRCQUNwQzt3QkFDRixPQUFPLElBQUlzQixnQkFBZ0I7NEJBQ3pCSixRQUFRQyxHQUFHLENBQUM7NEJBQ1ovQixXQUFXa0M7NEJBQ1hwQyxRQUFRb0MsZUFBZXJDLElBQUk7NEJBRTNCLHlDQUF5Qzs0QkFDekNrQixjQUFjO2dDQUNaUixJQUFJO2dDQUNKUyxXQUFXO2dDQUNYQyxTQUFTaUIsZUFBZXJDLElBQUksQ0FBQ1UsRUFBRTtnQ0FDL0JXLE1BQU07Z0NBQ05DLFdBQVc7Z0NBQ1hULFlBQVksSUFBSUMsT0FBT0MsV0FBVztnQ0FDbENDLFlBQVksSUFBSUYsT0FBT0MsV0FBVzs0QkFDcEM7d0JBQ0YsT0FBTzs0QkFDTGtCLFFBQVFDLEdBQUcsQ0FBQzs0QkFDWixzQ0FBc0M7NEJBQ3RDakMsUUFBUTtnQ0FDTlMsSUFBSTtnQ0FDSitCLE9BQU87Z0NBQ1A1QixZQUFZLElBQUlDLE9BQU9DLFdBQVc7Z0NBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7Z0NBQ2xDMkIsY0FBYyxDQUFDO2dDQUNmQyxlQUFlLENBQUM7Z0NBQ2hCQyxLQUFLO2dDQUNMQyxzQkFBc0IsSUFBSS9CLE9BQU9DLFdBQVc7NEJBQzlDOzRCQUVBLHVCQUF1Qjs0QkFDdkJHLGNBQWM7Z0NBQ1pSLElBQUk7Z0NBQ0pTLFdBQVc7Z0NBQ1hDLFNBQVM7Z0NBQ1RDLE1BQU07Z0NBQ05DLFdBQVc7Z0NBQ1hULFlBQVksSUFBSUMsT0FBT0MsV0FBVztnQ0FDbENDLFlBQVksSUFBSUYsT0FBT0MsV0FBVzs0QkFDcEM7d0JBQ0Y7d0JBRUFWLFdBQVc7d0JBQ1hFLFlBQVk7d0JBQ1pzQjt3QkFDQUksUUFBUUMsR0FBRyxDQUFDO29CQUVkLEVBQUUsT0FBT0ksT0FBTzt3QkFDZEwsUUFBUUssS0FBSyxDQUFDLDJEQUEyREE7d0JBQ3pFLHVDQUF1Qzt3QkFDdkNyQyxRQUFRO3dCQUNSRSxXQUFXO3dCQUNYZSxjQUFjOzRCQUNaUixJQUFJOzRCQUNKUyxXQUFXOzRCQUNYQyxTQUFTOzRCQUNUQyxNQUFNOzRCQUNOQyxXQUFXOzRCQUNYVCxZQUFZLElBQUlDLE9BQU9DLFdBQVc7NEJBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7d0JBQ3BDO3dCQUNBVixXQUFXO3dCQUNYRSxZQUFZO3dCQUNac0I7b0JBQ0Y7Z0JBQ0Y7O1lBRUFNO1lBRUEsMEJBQTBCO1lBQzFCLE1BQU0sRUFBRUMsTUFBTSxFQUFFVSxZQUFZLEVBQUUsRUFBRSxHQUFHakQsU0FBUzBDLElBQUksQ0FBQ1EsaUJBQWlCOzBDQUNoRSxPQUFPQyxPQUFPQztvQkFDWmhCLFFBQVFDLEdBQUcsQ0FBQyx3Q0FBd0NjO29CQUVwRCxJQUFJQyxZQUFZO3dCQUNkOUMsV0FBVzhDO3dCQUNYaEQsUUFBUWdELFdBQVdqRCxJQUFJO3dCQUV2Qix5Q0FBeUM7d0JBQ3pDa0IsY0FBYzs0QkFDWlIsSUFBSTs0QkFDSlMsV0FBVzs0QkFDWEMsU0FBUzZCLFdBQVdqRCxJQUFJLENBQUNVLEVBQUU7NEJBQzNCVyxNQUFNOzRCQUNOQyxXQUFXOzRCQUNYVCxZQUFZLElBQUlDLE9BQU9DLFdBQVc7NEJBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7d0JBQ3BDO29CQUNGLE9BQU87d0JBQ0xrQixRQUFRQyxHQUFHLENBQUM7d0JBQ1osc0NBQXNDO3dCQUN0Q2pDLFFBQVE7NEJBQ05TLElBQUk7NEJBQ0orQixPQUFPOzRCQUNQNUIsWUFBWSxJQUFJQyxPQUFPQyxXQUFXOzRCQUNsQ0MsWUFBWSxJQUFJRixPQUFPQyxXQUFXOzRCQUNsQzJCLGNBQWMsQ0FBQzs0QkFDZkMsZUFBZSxDQUFDOzRCQUNoQkMsS0FBSzs0QkFDTEMsc0JBQXNCLElBQUkvQixPQUFPQyxXQUFXO3dCQUM5Qzt3QkFDQVosV0FBVzt3QkFFWCx1QkFBdUI7d0JBQ3ZCZSxjQUFjOzRCQUNaUixJQUFJOzRCQUNKUyxXQUFXOzRCQUNYQyxTQUFTOzRCQUNUQyxNQUFNOzRCQUNOQyxXQUFXOzRCQUNYVCxZQUFZLElBQUlDLE9BQU9DLFdBQVc7NEJBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7d0JBQ3BDO29CQUNGO29CQUVBVixXQUFXO29CQUNYRSxZQUFZO29CQUNac0I7Z0JBQ0Y7O1lBR0Y7MENBQU87b0JBQ0xpQixhQUFhSSxXQUFXO2dCQUMxQjs7UUFDRjtpQ0FBRyxFQUFFO0lBRUwsTUFBTUMsU0FBUyxPQUFPVixPQUFlVztRQUNuQyxJQUFJO1lBQ0YsTUFBTSxFQUFFZCxLQUFLLEVBQUUsR0FBRyxNQUFNekMsU0FBUzBDLElBQUksQ0FBQ2Msa0JBQWtCLENBQUM7Z0JBQ3ZEWjtnQkFDQVc7WUFDRjtZQUNBLE9BQU87Z0JBQUVkO1lBQU07UUFDakIsRUFBRSxPQUFPQSxPQUFPO1lBQ2RMLFFBQVFLLEtBQUssQ0FBQyxrQ0FBa0NBO1lBQ2hELE9BQU87Z0JBQUVBO1lBQU07UUFDakI7SUFDRjtJQUVBLE1BQU1nQixTQUFTLE9BQU9iLE9BQWVXO1FBQ25DLElBQUk7WUFDRixNQUFNLEVBQUVkLEtBQUssRUFBRSxHQUFHLE1BQU16QyxTQUFTMEMsSUFBSSxDQUFDZSxNQUFNLENBQUM7Z0JBQzNDYjtnQkFDQVc7WUFDRjtZQUNBLE9BQU87Z0JBQUVkO1lBQU07UUFDakIsRUFBRSxPQUFPQSxPQUFPO1lBQ2RMLFFBQVFLLEtBQUssQ0FBQyxrQ0FBa0NBO1lBQ2hELE9BQU87Z0JBQUVBO1lBQU07UUFDakI7SUFDRjtJQUVBLE1BQU1pQixVQUFVO1FBQ2R0QixRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJO1lBQ0YsTUFBTXJDLFNBQVMwQyxJQUFJLENBQUNnQixPQUFPO1lBRTNCLHNCQUFzQjtZQUN0QnRELFFBQVE7WUFDUkUsV0FBVztZQUNYZSxjQUFjO2dCQUNaUixJQUFJO2dCQUNKUyxXQUFXO2dCQUNYQyxTQUFTO2dCQUNUQyxNQUFNO2dCQUNOQyxXQUFXO2dCQUNYVCxZQUFZLElBQUlDLE9BQU9DLFdBQVc7Z0JBQ2xDQyxZQUFZLElBQUlGLE9BQU9DLFdBQVc7WUFDcEM7WUFDQVYsV0FBVztZQUNYRSxZQUFZO1lBQ1pzQjtZQUVBLHlCQUF5QjtZQUN6QixJQUFJLElBQTZCLEVBQUU7Z0JBQ2pDMkIsT0FBT0MsUUFBUSxDQUFDQyxJQUFJLEdBQUc7WUFDekI7UUFDRixFQUFFLE9BQU9wQixPQUFPO1lBQ2RMLFFBQVFLLEtBQUssQ0FBQywwQ0FBMENBO1lBQ3hELDBDQUEwQztZQUMxQyxJQUFJLElBQTZCLEVBQUU7Z0JBQ2pDa0IsT0FBT0MsUUFBUSxDQUFDQyxJQUFJLEdBQUc7WUFDekI7UUFDRjtJQUNGO0lBRUEsTUFBTUMsZ0JBQWdCO1FBQ3BCMUIsUUFBUUMsR0FBRyxDQUFDO0lBQ1osK0RBQStEO0lBQy9ELHNDQUFzQztJQUN4QztJQUVBLE1BQU0wQixpQkFBaUI7UUFDckIzQixRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJO1lBQ0YsTUFBTSxFQUFFRSxNQUFNLEVBQUVsQyxPQUFPLEVBQUUsRUFBRW9DLEtBQUssRUFBRSxHQUFHLE1BQU16QyxTQUFTMEMsSUFBSSxDQUFDcUIsY0FBYztZQUN2RSxJQUFJdEIsT0FBTztnQkFDVEwsUUFBUUssS0FBSyxDQUFDLDZDQUE2Q0E7WUFDN0QsT0FBTztnQkFDTG5DLFdBQVdEO2dCQUNYLElBQUlBLG9CQUFBQSw4QkFBQUEsUUFBU0YsSUFBSSxFQUFFO29CQUNqQkMsUUFBUUMsUUFBUUYsSUFBSTtnQkFDdEI7WUFDRjtRQUNGLEVBQUUsT0FBT3NDLE9BQU87WUFDZEwsUUFBUUssS0FBSyxDQUFDLHdEQUF3REE7UUFDeEU7SUFDRjtJQUVBLE1BQU11QixRQUF5QjtRQUM3QjdEO1FBQ0FRO1FBQ0FTO1FBQ0FmO1FBQ0FFO1FBQ0ErQztRQUNBRztRQUNBQztRQUNBSTtRQUNBQztRQUNBdEQ7UUFDQW1CO1FBQ0FGO1FBQ0FHO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFFQSxxQkFDRSw4REFBQ3ZDLFlBQVl5RSxRQUFRO1FBQUNELE9BQU9BO2tCQUMxQjlEOzs7Ozs7QUFHUDtHQXJUZ0JEO0tBQUFBO0FBdVRULFNBQVNpRTs7SUFDZCxNQUFNQyxVQUFVaEYsaURBQVVBLENBQUNLO0lBQzNCLElBQUkyRSxZQUFZMUUsV0FBVztRQUN6QixNQUFNLElBQUkyRSxNQUFNO0lBQ2xCO0lBQ0EsT0FBT0Q7QUFDVDtJQU5nQkQ7QUFRaEIsaUVBQWUxRSxXQUFXQSxFQUFBIiwic291cmNlcyI6WyIvaG9tZS91YnVudHUvRVRMQS1QbGF0Zm9ybS9mcm9udGVuZC9zcmMvY29udGV4dHMvQXV0aENvbnRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50J1xuXG5pbXBvcnQgeyBjcmVhdGVDb250ZXh0LCB1c2VDb250ZXh0LCB1c2VFZmZlY3QsIHVzZVN0YXRlLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcbmltcG9ydCB0eXBlIHsgVXNlciwgU2Vzc2lvbiB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcbmltcG9ydCB7IHNldFNlcnZpY2VBdXRoQ29udGV4dCB9IGZyb20gJ0AvdXRpbHMvc2VydmljZUF1dGgnXG5cbmludGVyZmFjZSBUZW5hbnQge1xuICBpZDogc3RyaW5nXG4gIG5hbWU6IHN0cmluZ1xuICBzbHVnOiBzdHJpbmdcbiAgY3JlYXRlZF9hdDogc3RyaW5nXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgVGVuYW50VXNlciB7XG4gIGlkOiBzdHJpbmdcbiAgdGVuYW50X2lkOiBzdHJpbmdcbiAgdXNlcl9pZDogc3RyaW5nXG4gIHJvbGU6IHN0cmluZ1xuICBpc19hY3RpdmU6IGJvb2xlYW5cbiAgY3JlYXRlZF9hdDogc3RyaW5nXG4gIHVwZGF0ZWRfYXQ6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgQXV0aENvbnRleHRUeXBlIHtcbiAgdXNlcjogVXNlciB8IG51bGxcbiAgdGVuYW50OiBUZW5hbnQgfCBudWxsXG4gIHRlbmFudFVzZXI6IFRlbmFudFVzZXIgfCBudWxsXG4gIHNlc3Npb246IFNlc3Npb24gfCBudWxsXG4gIGxvYWRpbmc6IGJvb2xlYW5cbiAgc2lnbkluOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTx7IGVycm9yOiBhbnkgfT5cbiAgc2lnblVwOiAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4gUHJvbWlzZTx7IGVycm9yOiBhbnkgfT5cbiAgc2lnbk91dDogKCkgPT4gUHJvbWlzZTx2b2lkPlxuICByZWZyZXNoVGVuYW50OiAoKSA9PiBQcm9taXNlPHZvaWQ+XG4gIHJlZnJlc2hTZXNzaW9uOiAoKSA9PiBQcm9taXNlPHZvaWQ+XG4gIGlzU3RhYmxlOiBib29sZWFuXG4gIGlzQXV0aGVudGljYXRlZDogYm9vbGVhblxuICBpc0RlbW9Nb2RlOiBib29sZWFuXG4gIGN1cnJlbnRVc2VySWQ6IHN0cmluZyB8IG51bGxcbiAgY3VycmVudFRlbmFudElkOiBzdHJpbmcgfCBudWxsXG4gIGN1cnJlbnRVc2VyUm9sZTogc3RyaW5nIHwgbnVsbFxufVxuXG5jb25zdCBBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8QXV0aENvbnRleHRUeXBlIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpXG5cbi8vIEluaXRpYWxpemUgU3VwYWJhc2UgY2xpZW50XG5jb25zdCBzdXBhYmFzZVVybCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCAnaHR0cHM6Ly9kZW1vLnN1cGFiYXNlLmNvJ1xuY29uc3Qgc3VwYWJhc2VBbm9uS2V5ID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9UT0tFTiB8fCAnZGVtby1rZXknXG5cbmV4cG9ydCBjb25zdCBzdXBhYmFzZSA9IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KVxuXG5leHBvcnQgZnVuY3Rpb24gQXV0aFByb3ZpZGVyKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgW3VzZXIsIHNldFVzZXJdID0gdXNlU3RhdGU8VXNlciB8IG51bGw+KG51bGwpXG4gIGNvbnN0IFtzZXNzaW9uLCBzZXRTZXNzaW9uXSA9IHVzZVN0YXRlPFNlc3Npb24gfCBudWxsPihudWxsKVxuICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKVxuICBjb25zdCBbaXNTdGFibGUsIHNldElzU3RhYmxlXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBcbiAgLy8gVGVuYW50IHN0YXRlIHdpdGggZGVtbyBmYWxsYmFja1xuICBjb25zdCBbdGVuYW50LCBzZXRUZW5hbnRdID0gdXNlU3RhdGU8VGVuYW50IHwgbnVsbD4oe1xuICAgIGlkOiAnNTRhZmJkMWQtZTcyYS00MWUxLTlkMzktMmM4YTA4YTI1N2ZmJyxcbiAgICBuYW1lOiAnRGVtbyBDb21wYW55JyxcbiAgICBzbHVnOiAnZGVtby1jb21wYW55JyxcbiAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gIH0pXG4gIFxuICAvLyBUZW5hbnQgdXNlciBzdGF0ZSB3aXRoIGRlbW8gZmFsbGJhY2tcbiAgY29uc3QgW3RlbmFudFVzZXIsIHNldFRlbmFudFVzZXJdID0gdXNlU3RhdGU8VGVuYW50VXNlciB8IG51bGw+KHtcbiAgICBpZDogJ2RlbW8tdGVuYW50LXVzZXItaWQnLFxuICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgdXNlcl9pZDogJ2RlbW8tdXNlci1pZCcsXG4gICAgcm9sZTogJ2NsaWVudF9hZG1pbicsIC8vIERlZmF1bHQgdG8gY2xpZW50X2FkbWluIGZvciBkZW1vXG4gICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgfSlcblxuICAvLyBDb21wdXRlZCBwcm9wZXJ0aWVzIGZvciBSQkFDXG4gIGNvbnN0IGlzRGVtb01vZGUgPSAhcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIHx8IFxuICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMID09PSAnaHR0cHM6Ly9kZW1vLnN1cGFiYXNlLmNvJyB8fFxuICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMLmluY2x1ZGVzKCdwbGFjZWhvbGRlcicpXG4gIGNvbnN0IGlzQXV0aGVudGljYXRlZCA9ICEhdXNlciB8fCAhIXNlc3Npb24gfHwgaXNEZW1vTW9kZVxuICBjb25zdCBjdXJyZW50VXNlcklkID0gdXNlcj8uaWQgfHwgdGVuYW50VXNlcj8udXNlcl9pZCB8fCBudWxsXG4gIGNvbnN0IGN1cnJlbnRUZW5hbnRJZCA9IHRlbmFudD8uaWQgfHwgbnVsbFxuICBjb25zdCBjdXJyZW50VXNlclJvbGUgPSB0ZW5hbnRVc2VyPy5yb2xlIHx8IG51bGxcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gdXBkYXRlIHNlcnZpY2UgYXV0aCBjb250ZXh0XG4gIGNvbnN0IHVwZGF0ZVNlcnZpY2VBdXRoQ29udGV4dCA9ICgpID0+IHtcbiAgICBzZXRTZXJ2aWNlQXV0aENvbnRleHQoe1xuICAgICAgdXNlcklkOiBjdXJyZW50VXNlcklkLFxuICAgICAgdGVuYW50SWQ6IGN1cnJlbnRUZW5hbnRJZCxcbiAgICAgIHVzZXJSb2xlOiBjdXJyZW50VXNlclJvbGUsXG4gICAgICBpc0F1dGhlbnRpY2F0ZWQsXG4gICAgICBpc0RlbW9Nb2RlXG4gICAgfSlcbiAgfVxuXG4gIC8vIEluaXRpYWxpemUgYXV0aGVudGljYXRpb24gc3RhdGVcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UkCBBdXRoUHJvdmlkZXI6IEluaXRpYWxpemluZyBhdXRoZW50aWNhdGlvbiBzdGF0ZScpXG4gICAgXG4gICAgY29uc3QgZ2V0SW5pdGlhbFNlc3Npb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCB7IGRhdGE6IHsgc2Vzc2lvbjogaW5pdGlhbFNlc3Npb24gfSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguZ2V0U2Vzc2lvbigpXG4gICAgICAgIFxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQXV0aFByb3ZpZGVyOiBFcnJvciBnZXR0aW5nIHNlc3Npb246JywgZXJyb3IpXG4gICAgICAgICAgLy8gRmFsbCBiYWNrIHRvIGRlbW8gbW9kZVxuICAgICAgICAgIHNldFVzZXIoe1xuICAgICAgICAgICAgaWQ6ICdkZW1vLXVzZXItaWQnLFxuICAgICAgICAgICAgZW1haWw6ICdkZW1vQGNvbXBhbnkuY29tJyxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGFwcF9tZXRhZGF0YToge30sXG4gICAgICAgICAgICB1c2VyX21ldGFkYXRhOiB7fSxcbiAgICAgICAgICAgIGF1ZDogJ2F1dGhlbnRpY2F0ZWQnLFxuICAgICAgICAgICAgY29uZmlybWF0aW9uX3NlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH0gYXMgdW5rbm93biBhcyBVc2VyKVxuICAgICAgICAgIFxuICAgICAgICAgIHNldFRlbmFudFVzZXIoe1xuICAgICAgICAgICAgaWQ6ICdkZW1vLXRlbmFudC11c2VyLWlkJyxcbiAgICAgICAgICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgICAgICAgICB1c2VyX2lkOiAnZGVtby11c2VyLWlkJyxcbiAgICAgICAgICAgIHJvbGU6ICdjbGllbnRfYWRtaW4nLFxuICAgICAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGlmIChpbml0aWFsU2Vzc2lvbikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfinIUgQXV0aFByb3ZpZGVyOiBGb3VuZCBleGlzdGluZyBzZXNzaW9uJylcbiAgICAgICAgICBzZXRTZXNzaW9uKGluaXRpYWxTZXNzaW9uKVxuICAgICAgICAgIHNldFVzZXIoaW5pdGlhbFNlc3Npb24udXNlcilcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTZXQgdGVuYW50IHVzZXIgZm9yIGF1dGhlbnRpY2F0ZWQgdXNlclxuICAgICAgICAgIHNldFRlbmFudFVzZXIoe1xuICAgICAgICAgICAgaWQ6ICdkZW1vLXRlbmFudC11c2VyLWlkJyxcbiAgICAgICAgICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgICAgICAgICB1c2VyX2lkOiBpbml0aWFsU2Vzc2lvbi51c2VyLmlkLFxuICAgICAgICAgICAgcm9sZTogJ2NsaWVudF9hZG1pbicsXG4gICAgICAgICAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCfimqDvuI8gQXV0aFByb3ZpZGVyOiBObyBleGlzdGluZyBzZXNzaW9uLCB1c2luZyBkZW1vIHVzZXInKVxuICAgICAgICAgIC8vIEZhbGxiYWNrIHRvIGRlbW8gdXNlciBmb3Igc3RhYmlsaXR5XG4gICAgICAgICAgc2V0VXNlcih7XG4gICAgICAgICAgICBpZDogJ2RlbW8tdXNlci1pZCcsXG4gICAgICAgICAgICBlbWFpbDogJ2RlbW9AY29tcGFueS5jb20nLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgYXBwX21ldGFkYXRhOiB7fSxcbiAgICAgICAgICAgIHVzZXJfbWV0YWRhdGE6IHt9LFxuICAgICAgICAgICAgYXVkOiAnYXV0aGVudGljYXRlZCcsXG4gICAgICAgICAgICBjb25maXJtYXRpb25fc2VudF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgfSBhcyB1bmtub3duIGFzIFVzZXIpXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gU2V0IGRlbW8gdGVuYW50IHVzZXJcbiAgICAgICAgICBzZXRUZW5hbnRVc2VyKHtcbiAgICAgICAgICAgIGlkOiAnZGVtby10ZW5hbnQtdXNlci1pZCcsXG4gICAgICAgICAgICB0ZW5hbnRfaWQ6ICc1NGFmYmQxZC1lNzJhLTQxZTEtOWQzOS0yYzhhMDhhMjU3ZmYnLFxuICAgICAgICAgICAgdXNlcl9pZDogJ2RlbW8tdXNlci1pZCcsXG4gICAgICAgICAgICByb2xlOiAnY2xpZW50X2FkbWluJyxcbiAgICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICAgIHNldElzU3RhYmxlKHRydWUpXG4gICAgICAgIHVwZGF0ZVNlcnZpY2VBdXRoQ29udGV4dCgpXG4gICAgICAgIGNvbnNvbGUubG9nKCfinIUgQXV0aFByb3ZpZGVyOiBBdXRoZW50aWNhdGlvbiBzdGF0ZSBzdGFiaWxpemVkJylcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCfinYwgQXV0aFByb3ZpZGVyOiBVbmV4cGVjdGVkIGVycm9yIGR1cmluZyBpbml0aWFsaXphdGlvbjonLCBlcnJvcilcbiAgICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgc3RhYmxlIHN0YXRlXG4gICAgICAgIHNldFVzZXIobnVsbClcbiAgICAgICAgc2V0U2Vzc2lvbihudWxsKVxuICAgICAgICBzZXRUZW5hbnRVc2VyKHtcbiAgICAgICAgICBpZDogJ2RlbW8tdGVuYW50LXVzZXItaWQnLFxuICAgICAgICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgICAgICAgdXNlcl9pZDogJ2RlbW8tdXNlci1pZCcsXG4gICAgICAgICAgcm9sZTogJ2NsaWVudF9hZG1pbicsXG4gICAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSlcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgICAgc2V0SXNTdGFibGUodHJ1ZSlcbiAgICAgICAgdXBkYXRlU2VydmljZUF1dGhDb250ZXh0KClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRJbml0aWFsU2Vzc2lvbigpXG5cbiAgICAvLyBMaXN0ZW4gZm9yIGF1dGggY2hhbmdlc1xuICAgIGNvbnN0IHsgZGF0YTogeyBzdWJzY3JpcHRpb24gfSB9ID0gc3VwYWJhc2UuYXV0aC5vbkF1dGhTdGF0ZUNoYW5nZShcbiAgICAgIGFzeW5jIChldmVudCwgbmV3U2Vzc2lvbikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygn8J+UhCBBdXRoUHJvdmlkZXI6IEF1dGggc3RhdGUgY2hhbmdlZDonLCBldmVudClcbiAgICAgICAgXG4gICAgICAgIGlmIChuZXdTZXNzaW9uKSB7XG4gICAgICAgICAgc2V0U2Vzc2lvbihuZXdTZXNzaW9uKVxuICAgICAgICAgIHNldFVzZXIobmV3U2Vzc2lvbi51c2VyKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFNldCB0ZW5hbnQgdXNlciBmb3IgYXV0aGVudGljYXRlZCB1c2VyXG4gICAgICAgICAgc2V0VGVuYW50VXNlcih7XG4gICAgICAgICAgICBpZDogJ2RlbW8tdGVuYW50LXVzZXItaWQnLFxuICAgICAgICAgICAgdGVuYW50X2lkOiAnNTRhZmJkMWQtZTcyYS00MWUxLTlkMzktMmM4YTA4YTI1N2ZmJyxcbiAgICAgICAgICAgIHVzZXJfaWQ6IG5ld1Nlc3Npb24udXNlci5pZCxcbiAgICAgICAgICAgIHJvbGU6ICdjbGllbnRfYWRtaW4nLFxuICAgICAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn4pqg77iPIEF1dGhQcm92aWRlcjogVXNlciBzaWduZWQgb3V0LCBmYWxsaW5nIGJhY2sgdG8gZGVtbyB1c2VyJylcbiAgICAgICAgICAvLyBGYWxsYmFjayB0byBkZW1vIHVzZXIgZm9yIHN0YWJpbGl0eVxuICAgICAgICAgIHNldFVzZXIoe1xuICAgICAgICAgICAgaWQ6ICdkZW1vLXVzZXItaWQnLFxuICAgICAgICAgICAgZW1haWw6ICdkZW1vQGNvbXBhbnkuY29tJyxcbiAgICAgICAgICAgIGNyZWF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgICAgIGFwcF9tZXRhZGF0YToge30sXG4gICAgICAgICAgICB1c2VyX21ldGFkYXRhOiB7fSxcbiAgICAgICAgICAgIGF1ZDogJ2F1dGhlbnRpY2F0ZWQnLFxuICAgICAgICAgICAgY29uZmlybWF0aW9uX3NlbnRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICAgIH0gYXMgdW5rbm93biBhcyBVc2VyKVxuICAgICAgICAgIHNldFNlc3Npb24obnVsbClcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTZXQgZGVtbyB0ZW5hbnQgdXNlclxuICAgICAgICAgIHNldFRlbmFudFVzZXIoe1xuICAgICAgICAgICAgaWQ6ICdkZW1vLXRlbmFudC11c2VyLWlkJyxcbiAgICAgICAgICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgICAgICAgICB1c2VyX2lkOiAnZGVtby11c2VyLWlkJyxcbiAgICAgICAgICAgIHJvbGU6ICdjbGllbnRfYWRtaW4nLFxuICAgICAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0TG9hZGluZyhmYWxzZSlcbiAgICAgICAgc2V0SXNTdGFibGUodHJ1ZSlcbiAgICAgICAgdXBkYXRlU2VydmljZUF1dGhDb250ZXh0KClcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcbiAgICB9XG4gIH0sIFtdKVxuXG4gIGNvbnN0IHNpZ25JbiA9IGFzeW5jIChlbWFpbDogc3RyaW5nLCBwYXNzd29yZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbkluV2l0aFBhc3N3b3JkKHtcbiAgICAgICAgZW1haWwsXG4gICAgICAgIHBhc3N3b3JkLFxuICAgICAgfSlcbiAgICAgIHJldHVybiB7IGVycm9yIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEF1dGhQcm92aWRlcjogU2lnbiBpbiBlcnJvcjonLCBlcnJvcilcbiAgICAgIHJldHVybiB7IGVycm9yIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBzaWduVXAgPSBhc3luYyAoZW1haWw6IHN0cmluZywgcGFzc3dvcmQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnNpZ25VcCh7XG4gICAgICAgIGVtYWlsLFxuICAgICAgICBwYXNzd29yZCxcbiAgICAgIH0pXG4gICAgICByZXR1cm4geyBlcnJvciB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBBdXRoUHJvdmlkZXI6IFNpZ24gdXAgZXJyb3I6JywgZXJyb3IpXG4gICAgICByZXR1cm4geyBlcnJvciB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc2lnbk91dCA9IGFzeW5jICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+UkCBBdXRoUHJvdmlkZXI6IFNpZ25pbmcgb3V0JylcbiAgICB0cnkge1xuICAgICAgYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduT3V0KClcbiAgICAgIFxuICAgICAgLy8gUmVzZXQgdG8gZGVtbyBzdGF0ZVxuICAgICAgc2V0VXNlcihudWxsKVxuICAgICAgc2V0U2Vzc2lvbihudWxsKVxuICAgICAgc2V0VGVuYW50VXNlcih7XG4gICAgICAgIGlkOiAnZGVtby10ZW5hbnQtdXNlci1pZCcsXG4gICAgICAgIHRlbmFudF9pZDogJzU0YWZiZDFkLWU3MmEtNDFlMS05ZDM5LTJjOGEwOGEyNTdmZicsXG4gICAgICAgIHVzZXJfaWQ6ICdkZW1vLXVzZXItaWQnLFxuICAgICAgICByb2xlOiAnY2xpZW50X2FkbWluJyxcbiAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgfSlcbiAgICAgIHNldExvYWRpbmcoZmFsc2UpXG4gICAgICBzZXRJc1N0YWJsZSh0cnVlKVxuICAgICAgdXBkYXRlU2VydmljZUF1dGhDb250ZXh0KClcbiAgICAgIFxuICAgICAgLy8gUmVkaXJlY3QgdG8gbG9naW4gcGFnZVxuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy9sb2dpbidcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEF1dGhQcm92aWRlcjogRXJyb3IgZHVyaW5nIHNpZ24gb3V0OicsIGVycm9yKVxuICAgICAgLy8gU3RpbGwgcmVkaXJlY3QgZXZlbiBpZiB0aGVyZSdzIGFuIGVycm9yXG4gICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnL2xvZ2luJ1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHJlZnJlc2hUZW5hbnQgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ/CflIQgQXV0aFByb3ZpZGVyOiBSZWZyZXNoaW5nIHRlbmFudCBpbmZvcm1hdGlvbicpXG4gICAgLy8gSW4gYSByZWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdvdWxkIGZldGNoIGZyZXNoIHRlbmFudCBkYXRhXG4gICAgLy8gRm9yIG5vdywgd2UgbWFpbnRhaW4gdGhlIGRlbW8gc3RhdGVcbiAgfVxuXG4gIGNvbnN0IHJlZnJlc2hTZXNzaW9uID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCfwn5SEIEF1dGhQcm92aWRlcjogUmVmcmVzaGluZyBzZXNzaW9uJylcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBkYXRhOiB7IHNlc3Npb24gfSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGgucmVmcmVzaFNlc3Npb24oKVxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBBdXRoUHJvdmlkZXI6IEVycm9yIHJlZnJlc2hpbmcgc2Vzc2lvbjonLCBlcnJvcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlc3Npb24oc2Vzc2lvbilcbiAgICAgICAgaWYgKHNlc3Npb24/LnVzZXIpIHtcbiAgICAgICAgICBzZXRVc2VyKHNlc3Npb24udXNlcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgQXV0aFByb3ZpZGVyOiBVbmV4cGVjdGVkIGVycm9yIHJlZnJlc2hpbmcgc2Vzc2lvbjonLCBlcnJvcilcbiAgICB9XG4gIH1cblxuICBjb25zdCB2YWx1ZTogQXV0aENvbnRleHRUeXBlID0ge1xuICAgIHVzZXIsXG4gICAgdGVuYW50LFxuICAgIHRlbmFudFVzZXIsXG4gICAgc2Vzc2lvbixcbiAgICBsb2FkaW5nLFxuICAgIHNpZ25JbixcbiAgICBzaWduVXAsXG4gICAgc2lnbk91dCxcbiAgICByZWZyZXNoVGVuYW50LFxuICAgIHJlZnJlc2hTZXNzaW9uLFxuICAgIGlzU3RhYmxlLFxuICAgIGlzQXV0aGVudGljYXRlZCxcbiAgICBpc0RlbW9Nb2RlLFxuICAgIGN1cnJlbnRVc2VySWQsXG4gICAgY3VycmVudFRlbmFudElkLFxuICAgIGN1cnJlbnRVc2VyUm9sZVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8QXV0aENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3ZhbHVlfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L0F1dGhDb250ZXh0LlByb3ZpZGVyPlxuICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VBdXRoKCkge1xuICBjb25zdCBjb250ZXh0ID0gdXNlQ29udGV4dChBdXRoQ29udGV4dClcbiAgaWYgKGNvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlQXV0aCBtdXN0IGJlIHVzZWQgd2l0aGluIGFuIEF1dGhQcm92aWRlcicpXG4gIH1cbiAgcmV0dXJuIGNvbnRleHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXV0aENvbnRleHRcblxuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlU3RhdGUiLCJjcmVhdGVDbGllbnQiLCJzZXRTZXJ2aWNlQXV0aENvbnRleHQiLCJBdXRoQ29udGV4dCIsInVuZGVmaW5lZCIsInN1cGFiYXNlVXJsIiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCIsInN1cGFiYXNlQW5vbktleSIsIk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fVE9LRU4iLCJzdXBhYmFzZSIsIkF1dGhQcm92aWRlciIsImNoaWxkcmVuIiwidXNlciIsInNldFVzZXIiLCJzZXNzaW9uIiwic2V0U2Vzc2lvbiIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiaXNTdGFibGUiLCJzZXRJc1N0YWJsZSIsInRlbmFudCIsInNldFRlbmFudCIsImlkIiwibmFtZSIsInNsdWciLCJjcmVhdGVkX2F0IiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidXBkYXRlZF9hdCIsInRlbmFudFVzZXIiLCJzZXRUZW5hbnRVc2VyIiwidGVuYW50X2lkIiwidXNlcl9pZCIsInJvbGUiLCJpc19hY3RpdmUiLCJpc0RlbW9Nb2RlIiwiaW5jbHVkZXMiLCJpc0F1dGhlbnRpY2F0ZWQiLCJjdXJyZW50VXNlcklkIiwiY3VycmVudFRlbmFudElkIiwiY3VycmVudFVzZXJSb2xlIiwidXBkYXRlU2VydmljZUF1dGhDb250ZXh0IiwidXNlcklkIiwidGVuYW50SWQiLCJ1c2VyUm9sZSIsImNvbnNvbGUiLCJsb2ciLCJnZXRJbml0aWFsU2Vzc2lvbiIsImRhdGEiLCJpbml0aWFsU2Vzc2lvbiIsImVycm9yIiwiYXV0aCIsImdldFNlc3Npb24iLCJlbWFpbCIsImFwcF9tZXRhZGF0YSIsInVzZXJfbWV0YWRhdGEiLCJhdWQiLCJjb25maXJtYXRpb25fc2VudF9hdCIsInN1YnNjcmlwdGlvbiIsIm9uQXV0aFN0YXRlQ2hhbmdlIiwiZXZlbnQiLCJuZXdTZXNzaW9uIiwidW5zdWJzY3JpYmUiLCJzaWduSW4iLCJwYXNzd29yZCIsInNpZ25JbldpdGhQYXNzd29yZCIsInNpZ25VcCIsInNpZ25PdXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJyZWZyZXNoVGVuYW50IiwicmVmcmVzaFNlc3Npb24iLCJ2YWx1ZSIsIlByb3ZpZGVyIiwidXNlQXV0aCIsImNvbnRleHQiLCJFcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/contexts/AuthContext.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/services/pmbok_service.ts":
/*!***************************************!*\
  !*** ./src/services/pmbok_service.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   pmbok: () => (/* binding */ pmbok)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nclass PMBOKService {\n    // Initialize with user context (called after auth is stable)\n    async initialize(userId, tenantId) {\n        if (userId && tenantId) {\n            this.currentUserId = userId;\n            this.currentTenantId = tenantId;\n            this.isInitialized = true;\n            console.log('‚úÖ PMBOK Service: Initialized with user context:', {\n                userId,\n                tenantId\n            });\n        } else {\n            console.log('‚ö†Ô∏è PMBOK Service: Using demo context - no user/tenant provided');\n        }\n    }\n    // Update user context when auth changes\n    updateUserContext(userId, tenantId) {\n        if (this.currentUserId !== userId || this.currentTenantId !== tenantId) {\n            console.log('üîÑ PMBOK Service: Updating user context:', {\n                from: {\n                    userId: this.currentUserId,\n                    tenantId: this.currentTenantId\n                },\n                to: {\n                    userId,\n                    tenantId\n                }\n            });\n            this.currentUserId = userId;\n            this.currentTenantId = tenantId;\n            this.isInitialized = true;\n        }\n    }\n    // Helper function to handle missing customers gracefully\n    async handleMissingCustomers(workRequests) {\n        const customerIds = Array.from(new Set(workRequests.map((wr)=>wr.customer_id).filter(Boolean)));\n        if (customerIds.length === 0) {\n            console.log('‚ö†Ô∏è No customer IDs found in work requests');\n            return workRequests.map((wr)=>({\n                    ...wr,\n                    customer_name: 'Unknown Customer'\n                }));\n        }\n        try {\n            console.log('üë• Fetching customer information for IDs:', customerIds);\n            const { data: profiles, error } = await this.supabase.from('profiles').select('id, name, email').in('id', customerIds);\n            if (error) {\n                console.error('‚ùå Error fetching customer profiles:', error);\n                return workRequests.map((wr)=>({\n                        ...wr,\n                        customer_name: 'Unknown Customer'\n                    }));\n            }\n            console.log('‚úÖ Profile query succeeded, found:', (profiles === null || profiles === void 0 ? void 0 : profiles.length) || 0, 'profiles');\n            // Create customer lookup map\n            const customerMap = new Map();\n            profiles === null || profiles === void 0 ? void 0 : profiles.forEach((profile)=>{\n                customerMap.set(profile.id, profile.name || profile.email || 'Unknown Customer');\n            });\n            // Transform work requests with customer names\n            return workRequests.map((wr)=>({\n                    ...wr,\n                    customer_name: customerMap.get(wr.customer_id) || 'Missing Customer'\n                }));\n        } catch (error) {\n            console.error('‚ùå Exception during customer lookup:', error);\n            return workRequests.map((wr)=>({\n                    ...wr,\n                    customer_name: 'Unknown Customer'\n                }));\n        }\n    }\n    async getWorkRequests() {\n        try {\n            console.log('üîç Loading work requests from database...');\n            console.log('üè¢ Current context:', {\n                userId: this.currentUserId,\n                tenantId: this.currentTenantId,\n                initialized: this.isInitialized\n            });\n            // Query work requests for current tenant\n            const { data: workRequests, error } = await this.supabase.from('work_requests').select('*').eq('tenant_id', this.currentTenantId).order('created_at', {\n                ascending: false\n            });\n            if (error) {\n                console.error('‚ùå Error fetching work requests:', error);\n                throw error;\n            }\n            console.log('‚úÖ Work requests query succeeded, found:', (workRequests === null || workRequests === void 0 ? void 0 : workRequests.length) || 0, 'records');\n            if (workRequests && workRequests.length > 0) {\n                console.log('üìã Sample work request:', workRequests[0]);\n                // Handle missing customers gracefully\n                const workRequestsWithCustomers = await this.handleMissingCustomers(workRequests);\n                console.log('‚úÖ Data transformation completed, returning', workRequestsWithCustomers.length, 'records');\n                return workRequestsWithCustomers;\n            }\n            return [];\n        } catch (error) {\n            console.error('‚ùå Error in getWorkRequests:', error);\n            return [];\n        }\n    }\n    async getProjects() {\n        try {\n            console.log('üìä Loading projects from database...');\n            const { data: projects, error } = await this.supabase.from('project_charters').select('*').eq('tenant_id', this.currentTenantId).order('created_at', {\n                ascending: false\n            });\n            if (error) {\n                console.error('‚ùå Error fetching projects:', error);\n                throw error;\n            }\n            console.log('‚úÖ Projects query succeeded, found:', (projects === null || projects === void 0 ? void 0 : projects.length) || 0, 'records');\n            return projects || [];\n        } catch (error) {\n            console.error('‚ùå Error in getProjects:', error);\n            return [];\n        }\n    }\n    async getRisks() {\n        try {\n            console.log('‚ö†Ô∏è Loading risks from database...');\n            const { data: risks, error } = await this.supabase.from('risks').select('*').eq('tenant_id', this.currentTenantId).order('created_at', {\n                ascending: false\n            });\n            if (error) {\n                console.error('‚ùå Error fetching risks:', error);\n                throw error;\n            }\n            console.log('‚úÖ Risks query succeeded, found:', (risks === null || risks === void 0 ? void 0 : risks.length) || 0, 'records');\n            return risks || [];\n        } catch (error) {\n            console.error('‚ùå Error in getRisks:', error);\n            return [];\n        }\n    }\n    // Approval workflow methods\n    async approveWorkRequest(workRequestId, approverComments) {\n        try {\n            console.log('‚úÖ Approving work request:', workRequestId);\n            // Update work request status\n            const { error: updateError } = await this.supabase.from('work_requests').update({\n                approval_status: 'converted_to_project',\n                approved_by: this.currentUserId,\n                approved_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', workRequestId).eq('tenant_id', this.currentTenantId);\n            if (updateError) {\n                console.error('‚ùå Error updating work request:', updateError);\n                return {\n                    success: false,\n                    error: updateError.message\n                };\n            }\n            console.log('‚úÖ Work request approved successfully');\n            return {\n                success: true,\n                projectId: \"proj_\".concat(Date.now())\n            };\n        } catch (error) {\n            console.error('‚ùå Error in approveWorkRequest:', error);\n            return {\n                success: false,\n                error: 'Failed to approve work request'\n            };\n        }\n    }\n    async declineWorkRequest(workRequestId, reason) {\n        try {\n            console.log('‚ùå Declining work request:', workRequestId, 'Reason:', reason);\n            const { error } = await this.supabase.from('work_requests').update({\n                approval_status: 'declined',\n                decline_reason: reason,\n                reviewed_by: this.currentUserId,\n                reviewed_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', workRequestId).eq('tenant_id', this.currentTenantId);\n            if (error) {\n                console.error('‚ùå Error declining work request:', error);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            console.log('‚úÖ Work request declined successfully');\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('‚ùå Error in declineWorkRequest:', error);\n            return {\n                success: false,\n                error: 'Failed to decline work request'\n            };\n        }\n    }\n    async setWorkRequestUnderReview(workRequestId) {\n        try {\n            console.log('üîç Setting work request under review:', workRequestId);\n            const { error } = await this.supabase.from('work_requests').update({\n                approval_status: 'under_review',\n                reviewed_by: this.currentUserId,\n                reviewed_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).eq('id', workRequestId).eq('tenant_id', this.currentTenantId);\n            if (error) {\n                console.error('‚ùå Error setting work request under review:', error);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            console.log('‚úÖ Work request set under review successfully');\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('‚ùå Error in setWorkRequestUnderReview:', error);\n            return {\n                success: false,\n                error: 'Failed to set work request under review'\n            };\n        }\n    }\n    // Method to create missing customers\n    async createMissingCustomer(name, email) {\n        try {\n            console.log('üë§ Creating missing customer:', {\n                name,\n                email\n            });\n            const customerId = \"cust_\".concat(Date.now());\n            const { data: customer, error } = await this.supabase.from('profiles').insert({\n                id: customerId,\n                name: name,\n                email: email,\n                tenant_id: this.currentTenantId,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            }).select().single();\n            if (error) {\n                console.error('‚ùå Error creating customer:', error);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            console.log('‚úÖ Customer created successfully:', customerId);\n            return {\n                success: true,\n                customerId\n            };\n        } catch (error) {\n            console.error('‚ùå Error in createMissingCustomer:', error);\n            return {\n                success: false,\n                error: 'Failed to create customer'\n            };\n        }\n    }\n    // Method to link work request to existing customer\n    async linkWorkRequestToCustomer(workRequestId, customerId) {\n        try {\n            console.log('üîó Linking work request to customer:', {\n                workRequestId,\n                customerId\n            });\n            const { error } = await this.supabase.from('work_requests').update({\n                customer_id: customerId,\n                updated_at: new Date().toISOString()\n            }).eq('id', workRequestId).eq('tenant_id', this.currentTenantId);\n            if (error) {\n                console.error('‚ùå Error linking work request to customer:', error);\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            console.log('‚úÖ Work request linked to customer successfully');\n            return {\n                success: true\n            };\n        } catch (error) {\n            console.error('‚ùå Error in linkWorkRequestToCustomer:', error);\n            return {\n                success: false,\n                error: 'Failed to link work request to customer'\n            };\n        }\n    }\n    // Method to get available customers for linking\n    async getAvailableCustomers() {\n        try {\n            const { data: customers, error } = await this.supabase.from('profiles').select('id, name, email').eq('tenant_id', this.currentTenantId).order('name', {\n                ascending: true\n            });\n            if (error) {\n                console.error('‚ùå Error fetching available customers:', error);\n                return [];\n            }\n            return customers || [];\n        } catch (error) {\n            console.error('‚ùå Error in getAvailableCustomers:', error);\n            return [];\n        }\n    }\n    async getWorkRequestStats() {\n        try {\n            const workRequests = await this.getWorkRequests();\n            return {\n                total: workRequests.length,\n                pending: workRequests.filter((r)=>r.approval_status === 'submitted' || r.approval_status === 'under_review' || r.status === 'submitted' || r.status === 'under_review').length,\n                approved: workRequests.filter((r)=>r.approval_status === 'approved').length,\n                declined: workRequests.filter((r)=>r.approval_status === 'declined').length,\n                converted: workRequests.filter((r)=>r.approval_status === 'converted_to_project').length\n            };\n        } catch (error) {\n            console.error('‚ùå Error getting work request stats:', error);\n            return {\n                total: 0,\n                pending: 0,\n                approved: 0,\n                declined: 0,\n                converted: 0\n            };\n        }\n    }\n    constructor(){\n        this.currentUserId = 'demo-user-id';\n        this.currentTenantId = '54afbd1d-e72a-41e1-9d39-2c8a08a257ff';\n        this.isInitialized = false;\n        // Create Supabase client with environment variables\n        this.supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://your-project.supabase.co\" || 0, \"your_anon_token_here\" || 0);\n        console.log('üîß PMBOK Service: Created with default demo context');\n    }\n}\n// Create singleton instance\nconst pmbok = new PMBOKService();\n// Export the service class for type checking\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PMBOKService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/pmbok_service.ts\n"));

/***/ })

});