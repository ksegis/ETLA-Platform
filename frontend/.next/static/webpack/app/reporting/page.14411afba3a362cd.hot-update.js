"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/reporting/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ supabase),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   signInWithRole: () => (/* binding */ signInWithRole),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   userManagement: () => (/* binding */ userManagement)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://your-project.supabase.co\";\nconst supabaseAnonKey = \"your_anon_token_here\";\n// Check if we're in demo mode (only when explicitly set to demo values)\nconst isDemoMode = supabaseUrl === 'https://demo.supabase.co' || supabaseAnonKey === 'demo_anon_key' || !supabaseUrl && !supabaseAnonKey;\n// Mock data for demo mode\nconst mockUsers = [\n    {\n        id: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        email: 'demo@company.com',\n        full_name: 'Demo Host Admin',\n        phone: '+1-555-0101',\n        department: 'IT Administration',\n        job_title: 'System Administrator',\n        status: 'active',\n        created_at: '2024-01-01T00:00:00Z',\n        last_sign_in_at: '2024-12-01T10:00:00Z',\n        tenant_users: [\n            {\n                role: 'host_admin',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'all',\n                can_invite_users: true,\n                can_manage_sub_clients: true,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user2-id',\n        email: 'client.admin@company.com',\n        full_name: 'Client Admin User',\n        phone: '+1-555-0102',\n        department: 'Operations',\n        job_title: 'Operations Manager',\n        status: 'active',\n        created_at: '2024-01-02T00:00:00Z',\n        last_sign_in_at: '2024-11-30T15:30:00Z',\n        tenant_users: [\n            {\n                role: 'client_admin',\n                role_level: 'standard',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'tenant',\n                can_invite_users: true,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user3-id',\n        email: 'user@company.com',\n        full_name: 'Regular User',\n        phone: '+1-555-0103',\n        department: 'Finance',\n        job_title: 'Financial Analyst',\n        status: 'active',\n        created_at: '2024-01-03T00:00:00Z',\n        last_sign_in_at: '2024-11-29T09:15:00Z',\n        tenant_users: [\n            {\n                role: 'user',\n                role_level: 'standard',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'own',\n                can_invite_users: false,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user4-id',\n        email: 'manager@company.com',\n        full_name: 'Project Manager',\n        phone: '+1-555-0104',\n        department: 'Project Management',\n        job_title: 'Senior Project Manager',\n        status: 'active',\n        created_at: '2024-01-04T00:00:00Z',\n        last_sign_in_at: '2024-12-01T08:45:00Z',\n        tenant_users: [\n            {\n                role: 'project_manager',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'department',\n                can_invite_users: true,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user5-id',\n        email: 'analyst@company.com',\n        full_name: 'Data Analyst',\n        phone: '+1-555-0105',\n        department: 'Analytics',\n        job_title: 'Senior Data Analyst',\n        status: 'active',\n        created_at: '2024-01-05T00:00:00Z',\n        last_sign_in_at: '2024-11-28T14:20:00Z',\n        tenant_users: [\n            {\n                role: 'analyst',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'department',\n                can_invite_users: false,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    }\n];\nconst mockTenants = [\n    {\n        id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        name: 'Demo Company',\n        code: 'DEMO',\n        status: 'active',\n        tenant_type: 'enterprise',\n        is_active: true,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n    }\n];\nconst mockInvitations = [\n    {\n        id: 'invite1-id',\n        email: 'newuser@company.com',\n        full_name: 'New User',\n        role: 'user',\n        status: 'pending',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        created_at: '2024-11-25T00:00:00Z',\n        expires_at: '2024-12-25T00:00:00Z',\n        invited_by: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        tenants: {\n            name: 'Demo Company'\n        },\n        invited_by_profile: {\n            full_name: 'Demo Host Admin'\n        }\n    }\n];\nconst mockNotifications = [\n    {\n        id: 'notif1-id',\n        type: 'user_invitation',\n        title: 'New User Invitation',\n        message: 'A new user invitation has been sent to newuser@company.com',\n        user_id: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        is_read: false,\n        created_at: '2024-11-25T00:00:00Z',\n        data: {\n            email: 'newuser@company.com'\n        }\n    }\n];\n// Mock data for comprehensive reports\nconst mockEmployeeReports = [\n    {\n        id: 'emp1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'John',\n        last_name: 'Smith',\n        email: 'john.smith@company.com',\n        employment_status: 'active',\n        home_department: 'Engineering',\n        flsa_status: 'exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Professional',\n        job_title: 'Senior Software Engineer',\n        created_at: '2024-01-01T00:00:00Z'\n    },\n    {\n        id: 'emp2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'Sarah',\n        last_name: 'Johnson',\n        email: 'sarah.johnson@company.com',\n        employment_status: 'active',\n        home_department: 'Marketing',\n        flsa_status: 'non-exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Professional',\n        job_title: 'Marketing Manager',\n        created_at: '2024-01-15T00:00:00Z'\n    },\n    {\n        id: 'emp3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'Mike',\n        last_name: 'Davis',\n        email: 'mike.davis@company.com',\n        employment_status: 'active',\n        home_department: 'Sales',\n        flsa_status: 'exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Sales',\n        job_title: 'Sales Director',\n        created_at: '2024-02-01T00:00:00Z'\n    }\n];\nconst mockPayStatements = [\n    {\n        id: 'pay1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp1',\n        pay_date: '2024-11-30',\n        gross_pay: 8500,\n        net_pay: 6200,\n        federal_tax_withheld: 1200,\n        state_tax_withheld: 400,\n        department: 'Engineering',\n        regular_hours: 80,\n        overtime_hours: 5\n    },\n    {\n        id: 'pay2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp2',\n        pay_date: '2024-11-30',\n        gross_pay: 6500,\n        net_pay: 4800,\n        federal_tax_withheld: 900,\n        state_tax_withheld: 300,\n        department: 'Marketing',\n        regular_hours: 80,\n        overtime_hours: 2\n    },\n    {\n        id: 'pay3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp3',\n        pay_date: '2024-11-30',\n        gross_pay: 9500,\n        net_pay: 6900,\n        federal_tax_withheld: 1400,\n        state_tax_withheld: 500,\n        department: 'Sales',\n        regular_hours: 80,\n        overtime_hours: 8\n    }\n];\nconst mockTimecards = [\n    {\n        id: 'time1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp1',\n        total_hours: 85,\n        regular_hours: 80,\n        overtime_hours: 5,\n        holiday_hours: 0,\n        approval_status: 'approved',\n        department: 'Engineering',\n        week_ending: '2024-11-30'\n    },\n    {\n        id: 'time2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp2',\n        total_hours: 82,\n        regular_hours: 80,\n        overtime_hours: 2,\n        holiday_hours: 0,\n        approval_status: 'approved',\n        department: 'Marketing',\n        week_ending: '2024-11-30'\n    },\n    {\n        id: 'time3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp3',\n        total_hours: 88,\n        regular_hours: 80,\n        overtime_hours: 8,\n        holiday_hours: 0,\n        approval_status: 'pending',\n        department: 'Sales',\n        week_ending: '2024-11-30'\n    }\n];\nconst mockJobs = [\n    {\n        id: 'job1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Senior Software Engineer',\n        department: 'Engineering',\n        flsa_classification: 'exempt',\n        pay_range_min: 120000,\n        pay_range_max: 160000,\n        employee_count: 5\n    },\n    {\n        id: 'job2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Marketing Manager',\n        department: 'Marketing',\n        flsa_classification: 'non-exempt',\n        pay_range_min: 70000,\n        pay_range_max: 90000,\n        employee_count: 3\n    },\n    {\n        id: 'job3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Sales Director',\n        department: 'Sales',\n        flsa_classification: 'exempt',\n        pay_range_min: 100000,\n        pay_range_max: 140000,\n        employee_count: 2\n    }\n];\nconst mockTaxRecords = Array.from({\n    length: 50\n}, (_, i)=>{\n    const formTypes = [\n        'W-2',\n        '1099-MISC',\n        '1099-NEC'\n    ];\n    const statuses = [\n        'completed',\n        'pending',\n        'filed',\n        'under_review'\n    ];\n    const taxYears = [\n        '2024',\n        '2023',\n        '2022',\n        '2021'\n    ];\n    const employees = [\n        'emp1',\n        'emp2',\n        'emp3',\n        'emp4',\n        'emp5'\n    ];\n    const baseWage = 45000 + i * 1000;\n    const taxRate = 0.18 + i % 5 * 0.02;\n    return {\n        id: \"tax\".concat(i + 1),\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        employee_id: employees[i % employees.length],\n        employee_code: \"EMP\".concat(String(i + 1).padStart(3, '0')),\n        form_type: formTypes[i % formTypes.length],\n        tax_year: taxYears[i % taxYears.length],\n        status: statuses[i % statuses.length],\n        filing_status: i % 2 === 0 ? 'single' : 'married',\n        total_wages: baseWage,\n        federal_tax: Math.round(baseWage * taxRate),\n        state_tax: Math.round(baseWage * (taxRate * 0.6)),\n        total_taxes_withheld: Math.round(baseWage * (taxRate * 1.6)),\n        created_at: \"2024-\".concat(String(i % 12 + 1).padStart(2, '0'), \"-\").concat(String(i % 28 + 1).padStart(2, '0'), \"T00:00:00Z\")\n    };\n});\nconst mockBenefits = [\n    {\n        id: 'ben1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        deduction_type: 'Health Insurance',\n        employee_contribution: 150,\n        employer_contribution: 400,\n        frequency: 'monthly',\n        is_garnishment: false\n    },\n    {\n        id: 'ben2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        deduction_type: '401k',\n        employee_contribution: 500,\n        employer_contribution: 250,\n        frequency: 'monthly',\n        is_garnishment: false\n    }\n];\nconst mockCompliance = [\n    {\n        id: 'comp1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        compliance_type: 'OSHA',\n        status: 'current',\n        due_date: '2024-12-31',\n        is_overdue: false\n    },\n    {\n        id: 'comp2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        compliance_type: 'EEO-1',\n        status: 'pending',\n        due_date: '2024-12-15',\n        is_overdue: false\n    }\n];\nconst mockWorkRequests = [\n    {\n        id: 'wr1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Website Redesign Project',\n        description: 'Complete redesign of company website with modern UI/UX',\n        category: 'Web Development',\n        priority: 'high',\n        urgency: 'medium',\n        status: 'in_progress',\n        customer_id: 'cust1',\n        assigned_to: 'emp1',\n        estimated_hours: 120,\n        actual_hours: 45,\n        budget: 15000,\n        created_at: '2024-11-01T00:00:00Z'\n    },\n    {\n        id: 'wr2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Marketing Campaign Analysis',\n        description: 'Analyze Q4 marketing campaign performance and ROI',\n        category: 'Marketing',\n        priority: 'medium',\n        urgency: 'low',\n        status: 'completed',\n        customer_id: 'cust2',\n        assigned_to: 'emp2',\n        estimated_hours: 40,\n        actual_hours: 38,\n        budget: 5000,\n        created_at: '2024-10-15T00:00:00Z'\n    }\n];\nconst mockProjects = [\n    {\n        id: 'proj1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        work_request_id: 'wr1',\n        title: 'Website Redesign Implementation',\n        description: 'Implementation phase of the website redesign project',\n        status: 'in_progress',\n        priority: 'high',\n        assigned_team_lead: 'emp1',\n        estimated_hours: 120,\n        actual_hours: 45,\n        budget: 15000,\n        start_date: '2024-11-01',\n        end_date: '2024-12-31',\n        completion_percentage: 40,\n        created_at: '2024-11-01T00:00:00Z'\n    },\n    {\n        id: 'proj2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        work_request_id: 'wr2',\n        title: 'Q4 Marketing Analysis',\n        description: 'Complete analysis of Q4 marketing campaigns',\n        status: 'completed',\n        priority: 'medium',\n        assigned_team_lead: 'emp2',\n        estimated_hours: 40,\n        actual_hours: 38,\n        budget: 5000,\n        start_date: '2024-10-15',\n        end_date: '2024-11-15',\n        completion_percentage: 100,\n        created_at: '2024-10-15T00:00:00Z'\n    }\n];\n// Create mock Supabase client for demo mode\nconst createMockSupabaseClient = ()=>{\n    return {\n        from: (table)=>({\n                select: (columns)=>({\n                        eq: (column, value)=>({\n                                order: (column, options)=>({\n                                        limit: (limit)=>Promise.resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            }),\n                                        then: (resolve)=>resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            })\n                                    }),\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        in: (column, values)=>({\n                                order: (column, options)=>({\n                                        limit: (limit)=>Promise.resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            }),\n                                        then: (resolve)=>resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            })\n                                    }),\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        or: (condition)=>({\n                                order: (column, options)=>({\n                                        limit: (limit)=>Promise.resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            }),\n                                        then: (resolve)=>resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            })\n                                    }),\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        order: (column, options)=>({\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        then: (resolve)=>resolve({\n                                data: getMockData(table),\n                                error: null\n                            })\n                    }),\n                insert: (data)=>Promise.resolve({\n                        data,\n                        error: null\n                    }),\n                update: (data)=>({\n                        eq: (column, value)=>Promise.resolve({\n                                data,\n                                error: null\n                            })\n                    }),\n                delete: ()=>({\n                        eq: (column, value)=>Promise.resolve({\n                                data: null,\n                                error: null\n                            })\n                    })\n            }),\n        auth: {\n            getSession: ()=>Promise.resolve({\n                    data: {\n                        session: null\n                    },\n                    error: null\n                }),\n            onAuthStateChange: ()=>({\n                    data: {\n                        subscription: {\n                            unsubscribe: ()=>{}\n                        }\n                    }\n                })\n        }\n    };\n};\nconst getMockData = (table)=>{\n    switch(table){\n        case 'profiles':\n            return mockUsers;\n        case 'tenants':\n            return mockTenants;\n        case 'user_invitations':\n            return mockInvitations;\n        case 'admin_notifications':\n            return mockNotifications;\n        case 'employee_comprehensive_report':\n            return mockEmployeeReports;\n        case 'pay_statements_comprehensive_report':\n            return mockPayStatements;\n        case 'timecards_comprehensive_report':\n            return mockTimecards;\n        case 'timecards':\n            return mockTimecards;\n        case 'jobs_comprehensive_report':\n            return mockJobs;\n        case 'tax_records_comprehensive_report':\n            return mockTaxRecords;\n        case 'tax_records':\n            return mockTaxRecords;\n        case 'benefits_deductions_comprehensive_report':\n            return mockBenefits;\n        case 'compliance_records_comprehensive_report':\n            return mockCompliance;\n        case 'work_requests':\n            return mockWorkRequests;\n        case 'projects':\n            return mockProjects;\n        default:\n            return [];\n    }\n};\nconst supabase = isDemoMode ? createMockSupabaseClient() : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Auth helpers\nconst signInWithRole = async (email, password)=>{\n    const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n    });\n    if (data.user) {\n        // Get user profile with role and tenant\n        const { data: profile } = await supabase.from('users').select('role, tenant_id, first_name, last_name').eq('id', data.user.id).single();\n        return {\n            user: data.user,\n            profile,\n            error\n        };\n    }\n    return {\n        user: null,\n        profile: null,\n        error\n    };\n};\nconst signOut = async ()=>{\n    const { error } = await supabase.auth.signOut();\n    return {\n        error\n    };\n};\n// Database helpers\nconst getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return null;\n    const { data: profile } = await supabase.from('users').select('*').eq('id', user.id).single();\n    return {\n        ...user,\n        profile\n    };\n};\n// User Management Methods\nconst userManagement = {\n    // Create a new user with complete RBAC setup\n    createUser: async (userData)=>{\n        try {\n            // First, create the auth user\n            const { data: authData, error: authError } = await supabase.auth.admin.createUser({\n                email: userData.email,\n                password: userData.password,\n                email_confirm: true,\n                user_metadata: {\n                    full_name: userData.full_name,\n                    role: userData.role,\n                    role_level: userData.role_level\n                }\n            });\n            if (authError) {\n                return {\n                    success: false,\n                    error: authError.message\n                };\n            }\n            if (!authData.user) {\n                return {\n                    success: false,\n                    error: 'Failed to create user account'\n                };\n            }\n            // Create the user profile\n            const { error: profileError } = await supabase.from('profiles').insert({\n                id: authData.user.id,\n                email: userData.email,\n                full_name: userData.full_name,\n                phone: userData.phone,\n                department: userData.department,\n                job_title: userData.job_title,\n                role: userData.role,\n                role_level: userData.role_level,\n                tenant_id: userData.tenant_id,\n                is_active: true,\n                can_invite_users: userData.can_invite_users,\n                can_manage_sub_clients: userData.can_manage_sub_clients,\n                permission_scope: userData.permission_scope,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            if (profileError) {\n                // If profile creation fails, clean up the auth user\n                await supabase.auth.admin.deleteUser(authData.user.id);\n                return {\n                    success: false,\n                    error: \"Profile creation failed: \".concat(profileError.message)\n                };\n            }\n            // Create tenant_users record for RBAC\n            const { error: tenantUserError } = await supabase.from('tenant_users').insert({\n                tenant_id: userData.tenant_id,\n                user_id: authData.user.id,\n                role: userData.role,\n                role_level: userData.role_level,\n                can_invite_users: userData.can_invite_users,\n                can_manage_sub_clients: userData.can_manage_sub_clients,\n                permission_scope: userData.permission_scope,\n                is_active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            if (tenantUserError) {\n                // If tenant_users creation fails, clean up auth user and profile\n                await supabase.auth.admin.deleteUser(authData.user.id);\n                await supabase.from('profiles').delete().eq('id', authData.user.id);\n                return {\n                    success: false,\n                    error: \"Tenant assignment failed: \".concat(tenantUserError.message)\n                };\n            }\n            return {\n                success: true,\n                data: authData.user\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to create user'\n            };\n        }\n    },\n    // Invite users via email\n    inviteUsers: async (invitationData)=>{\n        try {\n            const invitations = [];\n            for (const email of invitationData.emails){\n                // Create invitation record\n                const { data: invitation, error: inviteError } = await supabase.from('user_invitations').insert({\n                    email,\n                    role: invitationData.role,\n                    role_level: invitationData.role_level,\n                    tenant_id: invitationData.tenant_id,\n                    message: invitationData.message,\n                    expires_at: new Date(Date.now() + invitationData.expires_in_days * 24 * 60 * 60 * 1000).toISOString(),\n                    created_at: new Date().toISOString()\n                }).select().single();\n                if (inviteError) {\n                    console.error(\"Failed to create invitation for \".concat(email, \":\"), inviteError);\n                    continue;\n                }\n                // Send invitation email using Supabase Auth\n                const { error: emailError } = await supabase.auth.admin.inviteUserByEmail(email, {\n                    redirectTo: \"\".concat(window.location.origin, \"/accept-invitation?token=\").concat(invitation.id),\n                    data: {\n                        role: invitationData.role,\n                        role_level: invitationData.role_level,\n                        tenant_id: invitationData.tenant_id,\n                        invitation_id: invitation.id\n                    }\n                });\n                if (emailError) {\n                    console.error(\"Failed to send invitation email to \".concat(email, \":\"), emailError);\n                    // Mark invitation as failed\n                    await supabase.from('user_invitations').update({\n                        status: 'failed'\n                    }).eq('id', invitation.id);\n                } else {\n                    invitations.push(invitation);\n                }\n            }\n            return {\n                success: true,\n                data: {\n                    sent: invitations.length,\n                    total: invitationData.emails.length\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to send invitations'\n            };\n        }\n    },\n    // Update user information\n    updateUser: async (userId, updateData)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                ...updateData,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to update user'\n            };\n        }\n    },\n    // Deactivate user\n    deactivateUser: async (userId)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                is_active: false,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to deactivate user'\n            };\n        }\n    },\n    // Activate user\n    activateUser: async (userId)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                is_active: true,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to activate user'\n            };\n        }\n    },\n    // Reset user password\n    resetUserPassword: async (email, newPassword)=>{\n        try {\n            if (newPassword) {\n                // Direct password reset (admin function)\n                const { error } = await supabase.auth.admin.updateUserById(email, {\n                    password: newPassword\n                });\n                if (error) {\n                    return {\n                        success: false,\n                        error: error.message\n                    };\n                }\n                return {\n                    success: true\n                };\n            } else {\n                // Email-based password reset\n                const { error } = await supabase.auth.resetPasswordForEmail(email, {\n                    redirectTo: \"\".concat(window.location.origin, \"/reset-password\")\n                });\n                if (error) {\n                    return {\n                        success: false,\n                        error: error.message\n                    };\n                }\n                return {\n                    success: true\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to reset password'\n            };\n        }\n    },\n    // Preview cleanup operations\n    previewUserCleanup: async (options)=>{\n        try {\n            let inactiveUsers = 0;\n            let unconfirmedUsers = 0;\n            let expiredInvites = 0;\n            if (options.deleteInactiveUsers) {\n                const cutoffDate = new Date(Date.now() - options.inactiveDays * 24 * 60 * 60 * 1000).toISOString();\n                const { count } = await supabase.from('profiles').select('*', {\n                    count: 'exact',\n                    head: true\n                }).lt('last_login', cutoffDate).eq('is_active', true);\n                inactiveUsers = count || 0;\n            }\n            if (options.deleteUnconfirmedUsers) {\n                const cutoffDate = new Date(Date.now() - options.unconfirmedDays * 24 * 60 * 60 * 1000).toISOString();\n                const { count } = await supabase.from('auth.users').select('*', {\n                    count: 'exact',\n                    head: true\n                }).is('email_confirmed_at', null).lt('created_at', cutoffDate);\n                unconfirmedUsers = count || 0;\n            }\n            if (options.deleteExpiredInvites) {\n                const { count } = await supabase.from('user_invitations').select('*', {\n                    count: 'exact',\n                    head: true\n                }).lt('expires_at', new Date().toISOString()).neq('status', 'accepted');\n                expiredInvites = count || 0;\n            }\n            const totalToDelete = inactiveUsers + unconfirmedUsers + expiredInvites;\n            return {\n                success: true,\n                data: {\n                    inactiveUsers,\n                    unconfirmedUsers,\n                    expiredInvites,\n                    totalToDelete\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to preview cleanup'\n            };\n        }\n    },\n    // Execute cleanup operations\n    executeUserCleanup: async (options)=>{\n        try {\n            let deletedCount = 0;\n            if (options.deleteInactiveUsers) {\n                const cutoffDate = new Date(Date.now() - options.inactiveDays * 24 * 60 * 60 * 1000).toISOString();\n                // Get inactive users\n                const { data: inactiveUsers } = await supabase.from('profiles').select('id').lt('last_login', cutoffDate).eq('is_active', true);\n                if (inactiveUsers && inactiveUsers.length > 0) {\n                    // Delete from auth\n                    for (const user of inactiveUsers){\n                        await supabase.auth.admin.deleteUser(user.id);\n                    }\n                    deletedCount += inactiveUsers.length;\n                }\n            }\n            if (options.deleteUnconfirmedUsers) {\n                const cutoffDate = new Date(Date.now() - options.unconfirmedDays * 24 * 60 * 60 * 1000).toISOString();\n                // This would require admin access to auth.users table\n                // For now, we'll just return success\n                console.log('Unconfirmed users cleanup would be executed here');\n            }\n            if (options.deleteExpiredInvites) {\n                const { error } = await supabase.from('user_invitations').delete().lt('expires_at', new Date().toISOString()).neq('status', 'accepted');\n                if (error) {\n                    console.error('Failed to delete expired invites:', error);\n                }\n            }\n            return {\n                success: true,\n                data: {\n                    deletedCount\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to execute cleanup'\n            };\n        }\n    }\n};\n// Export the standard Supabase client\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvc3VwYWJhc2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFvRDtBQUVwRCxNQUFNQyxjQUFjQyxrQ0FBb0M7QUFDeEQsTUFBTUcsa0JBQWtCSCxzQkFBMkM7QUFFbkUsd0VBQXdFO0FBQ3hFLE1BQU1LLGFBQWFOLGdCQUFnQiw4QkFDaEJJLG9CQUFvQixtQkFDbkIsQ0FBQ0osZUFBZSxDQUFDSTtBQUVyQywwQkFBMEI7QUFDMUIsTUFBTUcsWUFBWTtJQUNoQjtRQUNFQyxJQUFJO1FBQ0pDLE9BQU87UUFDUEMsV0FBVztRQUNYQyxPQUFPO1FBQ1BDLFlBQVk7UUFDWkMsV0FBVztRQUNYQyxRQUFRO1FBQ1JDLFlBQVk7UUFDWkMsaUJBQWlCO1FBQ2pCQyxjQUFjO1lBQUM7Z0JBQ2JDLE1BQU07Z0JBQ05DLFlBQVk7Z0JBQ1pDLFdBQVc7Z0JBQ1hDLFdBQVc7Z0JBQ1hDLG1CQUFtQjtnQkFDbkJDLDBCQUEwQjtnQkFDMUJDLGtCQUFrQjtnQkFDbEJDLGtCQUFrQjtnQkFDbEJDLHdCQUF3QjtnQkFDeEJDLFNBQVM7b0JBQUVDLE1BQU07b0JBQWdCQyxNQUFNO2dCQUFPO1lBQ2hEO1NBQUU7SUFDSjtJQUNBO1FBQ0VyQixJQUFJO1FBQ0pDLE9BQU87UUFDUEMsV0FBVztRQUNYQyxPQUFPO1FBQ1BDLFlBQVk7UUFDWkMsV0FBVztRQUNYQyxRQUFRO1FBQ1JDLFlBQVk7UUFDWkMsaUJBQWlCO1FBQ2pCQyxjQUFjO1lBQUM7Z0JBQ2JDLE1BQU07Z0JBQ05DLFlBQVk7Z0JBQ1pDLFdBQVc7Z0JBQ1hDLFdBQVc7Z0JBQ1hDLG1CQUFtQjtnQkFDbkJDLDBCQUEwQjtnQkFDMUJDLGtCQUFrQjtnQkFDbEJDLGtCQUFrQjtnQkFDbEJDLHdCQUF3QjtnQkFDeEJDLFNBQVM7b0JBQUVDLE1BQU07b0JBQWdCQyxNQUFNO2dCQUFPO1lBQ2hEO1NBQUU7SUFDSjtJQUNBO1FBQ0VyQixJQUFJO1FBQ0pDLE9BQU87UUFDUEMsV0FB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QUUsR0FBRyxNQUFNZSxTQUNyQjdFLElBQUksQ0FBQyxvQkFDTHNFLE1BQU0sR0FDTm9FLEVBQUUsQ0FBQyxjQUFjLElBQUl6QyxPQUFPQyxXQUFXLElBQ3ZDNkMsR0FBRyxDQUFDLFVBQVU7Z0JBRWpCLElBQUlqRixPQUFPO29CQUNUK0MsUUFBUS9DLEtBQUssQ0FBQyxxQ0FBcUNBO2dCQUNyRDtZQUNGO1lBRUEsT0FBTztnQkFDTGlDLFNBQVM7Z0JBQ1Q1SCxNQUFNO29CQUFFK0s7Z0JBQWE7WUFDdkI7UUFDRixFQUFFLE9BQU9wRixPQUFZO1lBQ25CLE9BQU87Z0JBQUVpQyxTQUFTO2dCQUFPakMsT0FBT0EsTUFBTTlGLE9BQU8sSUFBSTtZQUE0QjtRQUMvRTtJQUNGO0FBQ0YsRUFBQztBQUdELHNDQUFzQztBQUNSIiwic291cmNlcyI6WyIvaG9tZS91YnVudHUvRVRMQS1QbGF0Zm9ybS9mcm9udGVuZC9zcmMvbGliL3N1cGFiYXNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCB9IGZyb20gJ0BzdXBhYmFzZS9zdXBhYmFzZS1qcydcblxuY29uc3Qgc3VwYWJhc2VVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwhXG5jb25zdCBzdXBhYmFzZUFub25LZXkgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX1RPS0VOIVxuXG4vLyBDaGVjayBpZiB3ZSdyZSBpbiBkZW1vIG1vZGUgKG9ubHkgd2hlbiBleHBsaWNpdGx5IHNldCB0byBkZW1vIHZhbHVlcylcbmNvbnN0IGlzRGVtb01vZGUgPSBzdXBhYmFzZVVybCA9PT0gJ2h0dHBzOi8vZGVtby5zdXBhYmFzZS5jbycgfHxcbiAgICAgICAgICAgICAgICAgICBzdXBhYmFzZUFub25LZXkgPT09ICdkZW1vX2Fub25fa2V5JyB8fFxuICAgICAgICAgICAgICAgICAgICghc3VwYWJhc2VVcmwgJiYgIXN1cGFiYXNlQW5vbktleSlcblxuLy8gTW9jayBkYXRhIGZvciBkZW1vIG1vZGVcbmNvbnN0IG1vY2tVc2VycyA9IFtcbiAge1xuICAgIGlkOiAnYjIyNDkzNWYtNzMyZi00YjA5LWE0YTAtMTY0OTJjNWFlNTYzJyxcbiAgICBlbWFpbDogJ2RlbW9AY29tcGFueS5jb20nLFxuICAgIGZ1bGxfbmFtZTogJ0RlbW8gSG9zdCBBZG1pbicsXG4gICAgcGhvbmU6ICcrMS01NTUtMDEwMScsXG4gICAgZGVwYXJ0bWVudDogJ0lUIEFkbWluaXN0cmF0aW9uJyxcbiAgICBqb2JfdGl0bGU6ICdTeXN0ZW0gQWRtaW5pc3RyYXRvcicsXG4gICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonLFxuICAgIGxhc3Rfc2lnbl9pbl9hdDogJzIwMjQtMTItMDFUMTA6MDA6MDBaJyxcbiAgICB0ZW5hbnRfdXNlcnM6IFt7XG4gICAgICByb2xlOiAnaG9zdF9hZG1pbicsXG4gICAgICByb2xlX2xldmVsOiAnc2VuaW9yJyxcbiAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgICBpc19wcmltYXJ5X3RlbmFudDogdHJ1ZSxcbiAgICAgIHJlcXVpcmVzX3Bhc3N3b3JkX2NoYW5nZTogZmFsc2UsXG4gICAgICBwZXJtaXNzaW9uX3Njb3BlOiAnYWxsJyxcbiAgICAgIGNhbl9pbnZpdGVfdXNlcnM6IHRydWUsXG4gICAgICBjYW5fbWFuYWdlX3N1Yl9jbGllbnRzOiB0cnVlLFxuICAgICAgdGVuYW50czogeyBuYW1lOiAnRGVtbyBDb21wYW55JywgY29kZTogJ0RFTU8nIH1cbiAgICB9XVxuICB9LFxuICB7XG4gICAgaWQ6ICd1c2VyMi1pZCcsXG4gICAgZW1haWw6ICdjbGllbnQuYWRtaW5AY29tcGFueS5jb20nLFxuICAgIGZ1bGxfbmFtZTogJ0NsaWVudCBBZG1pbiBVc2VyJyxcbiAgICBwaG9uZTogJysxLTU1NS0wMTAyJyxcbiAgICBkZXBhcnRtZW50OiAnT3BlcmF0aW9ucycsXG4gICAgam9iX3RpdGxlOiAnT3BlcmF0aW9ucyBNYW5hZ2VyJyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTAxLTAyVDAwOjAwOjAwWicsXG4gICAgbGFzdF9zaWduX2luX2F0OiAnMjAyNC0xMS0zMFQxNTozMDowMFonLFxuICAgIHRlbmFudF91c2VyczogW3tcbiAgICAgIHJvbGU6ICdjbGllbnRfYWRtaW4nLFxuICAgICAgcm9sZV9sZXZlbDogJ3N0YW5kYXJkJyxcbiAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgICBpc19wcmltYXJ5X3RlbmFudDogdHJ1ZSxcbiAgICAgIHJlcXVpcmVzX3Bhc3N3b3JkX2NoYW5nZTogZmFsc2UsXG4gICAgICBwZXJtaXNzaW9uX3Njb3BlOiAndGVuYW50JyxcbiAgICAgIGNhbl9pbnZpdGVfdXNlcnM6IHRydWUsXG4gICAgICBjYW5fbWFuYWdlX3N1Yl9jbGllbnRzOiBmYWxzZSxcbiAgICAgIHRlbmFudHM6IHsgbmFtZTogJ0RlbW8gQ29tcGFueScsIGNvZGU6ICdERU1PJyB9XG4gICAgfV1cbiAgfSxcbiAge1xuICAgIGlkOiAndXNlcjMtaWQnLFxuICAgIGVtYWlsOiAndXNlckBjb21wYW55LmNvbScsXG4gICAgZnVsbF9uYW1lOiAnUmVndWxhciBVc2VyJyxcbiAgICBwaG9uZTogJysxLTU1NS0wMTAzJyxcbiAgICBkZXBhcnRtZW50OiAnRmluYW5jZScsXG4gICAgam9iX3RpdGxlOiAnRmluYW5jaWFsIEFuYWx5c3QnLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgY3JlYXRlZF9hdDogJzIwMjQtMDEtMDNUMDA6MDA6MDBaJyxcbiAgICBsYXN0X3NpZ25faW5fYXQ6ICcyMDI0LTExLTI5VDA5OjE1OjAwWicsXG4gICAgdGVuYW50X3VzZXJzOiBbe1xuICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgcm9sZV9sZXZlbDogJ3N0YW5kYXJkJyxcbiAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgICBpc19wcmltYXJ5X3RlbmFudDogdHJ1ZSxcbiAgICAgIHJlcXVpcmVzX3Bhc3N3b3JkX2NoYW5nZTogZmFsc2UsXG4gICAgICBwZXJtaXNzaW9uX3Njb3BlOiAnb3duJyxcbiAgICAgIGNhbl9pbnZpdGVfdXNlcnM6IGZhbHNlLFxuICAgICAgY2FuX21hbmFnZV9zdWJfY2xpZW50czogZmFsc2UsXG4gICAgICB0ZW5hbnRzOiB7IG5hbWU6ICdEZW1vIENvbXBhbnknLCBjb2RlOiAnREVNTycgfVxuICAgIH1dXG4gIH0sXG4gIHtcbiAgICBpZDogJ3VzZXI0LWlkJyxcbiAgICBlbWFpbDogJ21hbmFnZXJAY29tcGFueS5jb20nLFxuICAgIGZ1bGxfbmFtZTogJ1Byb2plY3QgTWFuYWdlcicsXG4gICAgcGhvbmU6ICcrMS01NTUtMDEwNCcsXG4gICAgZGVwYXJ0bWVudDogJ1Byb2plY3QgTWFuYWdlbWVudCcsXG4gICAgam9iX3RpdGxlOiAnU2VuaW9yIFByb2plY3QgTWFuYWdlcicsXG4gICAgc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0wNFQwMDowMDowMFonLFxuICAgIGxhc3Rfc2lnbl9pbl9hdDogJzIwMjQtMTItMDFUMDg6NDU6MDBaJyxcbiAgICB0ZW5hbnRfdXNlcnM6IFt7XG4gICAgICByb2xlOiAncHJvamVjdF9tYW5hZ2VyJyxcbiAgICAgIHJvbGVfbGV2ZWw6ICdzZW5pb3InLFxuICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICAgIGlzX3ByaW1hcnlfdGVuYW50OiB0cnVlLFxuICAgICAgcmVxdWlyZXNfcGFzc3dvcmRfY2hhbmdlOiBmYWxzZSxcbiAgICAgIHBlcm1pc3Npb25fc2NvcGU6ICdkZXBhcnRtZW50JyxcbiAgICAgIGNhbl9pbnZpdGVfdXNlcnM6IHRydWUsXG4gICAgICBjYW5fbWFuYWdlX3N1Yl9jbGllbnRzOiBmYWxzZSxcbiAgICAgIHRlbmFudHM6IHsgbmFtZTogJ0RlbW8gQ29tcGFueScsIGNvZGU6ICdERU1PJyB9XG4gICAgfV1cbiAgfSxcbiAge1xuICAgIGlkOiAndXNlcjUtaWQnLFxuICAgIGVtYWlsOiAnYW5hbHlzdEBjb21wYW55LmNvbScsXG4gICAgZnVsbF9uYW1lOiAnRGF0YSBBbmFseXN0JyxcbiAgICBwaG9uZTogJysxLTU1NS0wMTA1JyxcbiAgICBkZXBhcnRtZW50OiAnQW5hbHl0aWNzJyxcbiAgICBqb2JfdGl0bGU6ICdTZW5pb3IgRGF0YSBBbmFseXN0JyxcbiAgICBzdGF0dXM6ICdhY3RpdmUnLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTAxLTA1VDAwOjAwOjAwWicsXG4gICAgbGFzdF9zaWduX2luX2F0OiAnMjAyNC0xMS0yOFQxNDoyMDowMFonLFxuICAgIHRlbmFudF91c2VyczogW3tcbiAgICAgIHJvbGU6ICdhbmFseXN0JyxcbiAgICAgIHJvbGVfbGV2ZWw6ICdzZW5pb3InLFxuICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICAgIGlzX3ByaW1hcnlfdGVuYW50OiB0cnVlLFxuICAgICAgcmVxdWlyZXNfcGFzc3dvcmRfY2hhbmdlOiBmYWxzZSxcbiAgICAgIHBlcm1pc3Npb25fc2NvcGU6ICdkZXBhcnRtZW50JyxcbiAgICAgIGNhbl9pbnZpdGVfdXNlcnM6IGZhbHNlLFxuICAgICAgY2FuX21hbmFnZV9zdWJfY2xpZW50czogZmFsc2UsXG4gICAgICB0ZW5hbnRzOiB7IG5hbWU6ICdEZW1vIENvbXBhbnknLCBjb2RlOiAnREVNTycgfVxuICAgIH1dXG4gIH1cbl1cblxuY29uc3QgbW9ja1RlbmFudHMgPSBbXG4gIHtcbiAgICBpZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgbmFtZTogJ0RlbW8gQ29tcGFueScsXG4gICAgY29kZTogJ0RFTU8nLFxuICAgIHN0YXR1czogJ2FjdGl2ZScsXG4gICAgdGVuYW50X3R5cGU6ICdlbnRlcnByaXNlJyxcbiAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgY3JlYXRlZF9hdDogJzIwMjQtMDEtMDFUMDA6MDA6MDBaJyxcbiAgICB1cGRhdGVkX2F0OiAnMjAyNC0wMS0wMVQwMDowMDowMFonXG4gIH1cbl1cblxuY29uc3QgbW9ja0ludml0YXRpb25zID0gW1xuICB7XG4gICAgaWQ6ICdpbnZpdGUxLWlkJyxcbiAgICBlbWFpbDogJ25ld3VzZXJAY29tcGFueS5jb20nLFxuICAgIGZ1bGxfbmFtZTogJ05ldyBVc2VyJyxcbiAgICByb2xlOiAndXNlcicsXG4gICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0xMS0yNVQwMDowMDowMFonLFxuICAgIGV4cGlyZXNfYXQ6ICcyMDI0LTEyLTI1VDAwOjAwOjAwWicsXG4gICAgaW52aXRlZF9ieTogJ2IyMjQ5MzVmLTczMmYtNGIwOS1hNGEwLTE2NDkyYzVhZTU2MycsXG4gICAgdGVuYW50czogeyBuYW1lOiAnRGVtbyBDb21wYW55JyB9LFxuICAgIGludml0ZWRfYnlfcHJvZmlsZTogeyBmdWxsX25hbWU6ICdEZW1vIEhvc3QgQWRtaW4nIH1cbiAgfVxuXVxuXG5jb25zdCBtb2NrTm90aWZpY2F0aW9ucyA9IFtcbiAge1xuICAgIGlkOiAnbm90aWYxLWlkJyxcbiAgICB0eXBlOiAndXNlcl9pbnZpdGF0aW9uJyxcbiAgICB0aXRsZTogJ05ldyBVc2VyIEludml0YXRpb24nLFxuICAgIG1lc3NhZ2U6ICdBIG5ldyB1c2VyIGludml0YXRpb24gaGFzIGJlZW4gc2VudCB0byBuZXd1c2VyQGNvbXBhbnkuY29tJyxcbiAgICB1c2VyX2lkOiAnYjIyNDkzNWYtNzMyZi00YjA5LWE0YTAtMTY0OTJjNWFlNTYzJyxcbiAgICBpc19yZWFkOiBmYWxzZSxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0xMS0yNVQwMDowMDowMFonLFxuICAgIGRhdGE6IHsgZW1haWw6ICduZXd1c2VyQGNvbXBhbnkuY29tJyB9XG4gIH1cbl1cblxuLy8gTW9jayBkYXRhIGZvciBjb21wcmVoZW5zaXZlIHJlcG9ydHNcbmNvbnN0IG1vY2tFbXBsb3llZVJlcG9ydHMgPSBbXG4gIHtcbiAgICBpZDogJ2VtcDEnLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgZmlyc3RfbmFtZTogJ0pvaG4nLFxuICAgIGxhc3RfbmFtZTogJ1NtaXRoJyxcbiAgICBlbWFpbDogJ2pvaG4uc21pdGhAY29tcGFueS5jb20nLFxuICAgIGVtcGxveW1lbnRfc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBob21lX2RlcGFydG1lbnQ6ICdFbmdpbmVlcmluZycsXG4gICAgZmxzYV9zdGF0dXM6ICdleGVtcHQnLFxuICAgIHVuaW9uX3N0YXR1czogJ25vbl91bmlvbicsXG4gICAgZWVvX2NhdGVnb3JpZXM6ICdQcm9mZXNzaW9uYWwnLFxuICAgIGpvYl90aXRsZTogJ1NlbmlvciBTb2Z0d2FyZSBFbmdpbmVlcicsXG4gICAgY3JlYXRlZF9hdDogJzIwMjQtMDEtMDFUMDA6MDA6MDBaJ1xuICB9LFxuICB7XG4gICAgaWQ6ICdlbXAyJyxcbiAgICB0ZW5hbnRfaWQ6ICc5OTg4Mzc3OS05NTE3LTRjYTktYTNmOC03ZmRjNTkwNTFmMGUnLFxuICAgIGZpcnN0X25hbWU6ICdTYXJhaCcsXG4gICAgbGFzdF9uYW1lOiAnSm9obnNvbicsXG4gICAgZW1haWw6ICdzYXJhaC5qb2huc29uQGNvbXBhbnkuY29tJyxcbiAgICBlbXBsb3ltZW50X3N0YXR1czogJ2FjdGl2ZScsXG4gICAgaG9tZV9kZXBhcnRtZW50OiAnTWFya2V0aW5nJyxcbiAgICBmbHNhX3N0YXR1czogJ25vbi1leGVtcHQnLFxuICAgIHVuaW9uX3N0YXR1czogJ25vbl91bmlvbicsXG4gICAgZWVvX2NhdGVnb3JpZXM6ICdQcm9mZXNzaW9uYWwnLFxuICAgIGpvYl90aXRsZTogJ01hcmtldGluZyBNYW5hZ2VyJyxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0wMS0xNVQwMDowMDowMFonXG4gIH0sXG4gIHtcbiAgICBpZDogJ2VtcDMnLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgZmlyc3RfbmFtZTogJ01pa2UnLFxuICAgIGxhc3RfbmFtZTogJ0RhdmlzJyxcbiAgICBlbWFpbDogJ21pa2UuZGF2aXNAY29tcGFueS5jb20nLFxuICAgIGVtcGxveW1lbnRfc3RhdHVzOiAnYWN0aXZlJyxcbiAgICBob21lX2RlcGFydG1lbnQ6ICdTYWxlcycsXG4gICAgZmxzYV9zdGF0dXM6ICdleGVtcHQnLFxuICAgIHVuaW9uX3N0YXR1czogJ25vbl91bmlvbicsXG4gICAgZWVvX2NhdGVnb3JpZXM6ICdTYWxlcycsXG4gICAgam9iX3RpdGxlOiAnU2FsZXMgRGlyZWN0b3InLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTAyLTAxVDAwOjAwOjAwWidcbiAgfVxuXVxuXG5jb25zdCBtb2NrUGF5U3RhdGVtZW50cyA9IFtcbiAge1xuICAgIGlkOiAncGF5MScsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB1c2VyX2lkOiAnZW1wMScsXG4gICAgcGF5X2RhdGU6ICcyMDI0LTExLTMwJyxcbiAgICBncm9zc19wYXk6IDg1MDAsXG4gICAgbmV0X3BheTogNjIwMCxcbiAgICBmZWRlcmFsX3RheF93aXRoaGVsZDogMTIwMCxcbiAgICBzdGF0ZV90YXhfd2l0aGhlbGQ6IDQwMCxcbiAgICBkZXBhcnRtZW50OiAnRW5naW5lZXJpbmcnLFxuICAgIHJlZ3VsYXJfaG91cnM6IDgwLFxuICAgIG92ZXJ0aW1lX2hvdXJzOiA1XG4gIH0sXG4gIHtcbiAgICBpZDogJ3BheTInLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgdXNlcl9pZDogJ2VtcDInLFxuICAgIHBheV9kYXRlOiAnMjAyNC0xMS0zMCcsXG4gICAgZ3Jvc3NfcGF5OiA2NTAwLFxuICAgIG5ldF9wYXk6IDQ4MDAsXG4gICAgZmVkZXJhbF90YXhfd2l0aGhlbGQ6IDkwMCxcbiAgICBzdGF0ZV90YXhfd2l0aGhlbGQ6IDMwMCxcbiAgICBkZXBhcnRtZW50OiAnTWFya2V0aW5nJyxcbiAgICByZWd1bGFyX2hvdXJzOiA4MCxcbiAgICBvdmVydGltZV9ob3VyczogMlxuICB9LFxuICB7XG4gICAgaWQ6ICdwYXkzJyxcbiAgICB0ZW5hbnRfaWQ6ICc5OTg4Mzc3OS05NTE3LTRjYTktYTNmOC03ZmRjNTkwNTFmMGUnLFxuICAgIHVzZXJfaWQ6ICdlbXAzJyxcbiAgICBwYXlfZGF0ZTogJzIwMjQtMTEtMzAnLFxuICAgIGdyb3NzX3BheTogOTUwMCxcbiAgICBuZXRfcGF5OiA2OTAwLFxuICAgIGZlZGVyYWxfdGF4X3dpdGhoZWxkOiAxNDAwLFxuICAgIHN0YXRlX3RheF93aXRoaGVsZDogNTAwLFxuICAgIGRlcGFydG1lbnQ6ICdTYWxlcycsXG4gICAgcmVndWxhcl9ob3VyczogODAsXG4gICAgb3ZlcnRpbWVfaG91cnM6IDhcbiAgfVxuXVxuXG5jb25zdCBtb2NrVGltZWNhcmRzID0gW1xuICB7XG4gICAgaWQ6ICd0aW1lMScsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB1c2VyX2lkOiAnZW1wMScsXG4gICAgdG90YWxfaG91cnM6IDg1LFxuICAgIHJlZ3VsYXJfaG91cnM6IDgwLFxuICAgIG92ZXJ0aW1lX2hvdXJzOiA1LFxuICAgIGhvbGlkYXlfaG91cnM6IDAsXG4gICAgYXBwcm92YWxfc3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGRlcGFydG1lbnQ6ICdFbmdpbmVlcmluZycsXG4gICAgd2Vla19lbmRpbmc6ICcyMDI0LTExLTMwJ1xuICB9LFxuICB7XG4gICAgaWQ6ICd0aW1lMicsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB1c2VyX2lkOiAnZW1wMicsXG4gICAgdG90YWxfaG91cnM6IDgyLFxuICAgIHJlZ3VsYXJfaG91cnM6IDgwLFxuICAgIG92ZXJ0aW1lX2hvdXJzOiAyLFxuICAgIGhvbGlkYXlfaG91cnM6IDAsXG4gICAgYXBwcm92YWxfc3RhdHVzOiAnYXBwcm92ZWQnLFxuICAgIGRlcGFydG1lbnQ6ICdNYXJrZXRpbmcnLFxuICAgIHdlZWtfZW5kaW5nOiAnMjAyNC0xMS0zMCdcbiAgfSxcbiAge1xuICAgIGlkOiAndGltZTMnLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgdXNlcl9pZDogJ2VtcDMnLFxuICAgIHRvdGFsX2hvdXJzOiA4OCxcbiAgICByZWd1bGFyX2hvdXJzOiA4MCxcbiAgICBvdmVydGltZV9ob3VyczogOCxcbiAgICBob2xpZGF5X2hvdXJzOiAwLFxuICAgIGFwcHJvdmFsX3N0YXR1czogJ3BlbmRpbmcnLFxuICAgIGRlcGFydG1lbnQ6ICdTYWxlcycsXG4gICAgd2Vla19lbmRpbmc6ICcyMDI0LTExLTMwJ1xuICB9XG5dXG5cbmNvbnN0IG1vY2tKb2JzID0gW1xuICB7XG4gICAgaWQ6ICdqb2IxJyxcbiAgICB0ZW5hbnRfaWQ6ICc5OTg4Mzc3OS05NTE3LTRjYTktYTNmOC03ZmRjNTkwNTFmMGUnLFxuICAgIHRpdGxlOiAnU2VuaW9yIFNvZnR3YXJlIEVuZ2luZWVyJyxcbiAgICBkZXBhcnRtZW50OiAnRW5naW5lZXJpbmcnLFxuICAgIGZsc2FfY2xhc3NpZmljYXRpb246ICdleGVtcHQnLFxuICAgIHBheV9yYW5nZV9taW46IDEyMDAwMCxcbiAgICBwYXlfcmFuZ2VfbWF4OiAxNjAwMDAsXG4gICAgZW1wbG95ZWVfY291bnQ6IDVcbiAgfSxcbiAge1xuICAgIGlkOiAnam9iMicsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB0aXRsZTogJ01hcmtldGluZyBNYW5hZ2VyJyxcbiAgICBkZXBhcnRtZW50OiAnTWFya2V0aW5nJyxcbiAgICBmbHNhX2NsYXNzaWZpY2F0aW9uOiAnbm9uLWV4ZW1wdCcsXG4gICAgcGF5X3JhbmdlX21pbjogNzAwMDAsXG4gICAgcGF5X3JhbmdlX21heDogOTAwMDAsXG4gICAgZW1wbG95ZWVfY291bnQ6IDNcbiAgfSxcbiAge1xuICAgIGlkOiAnam9iMycsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB0aXRsZTogJ1NhbGVzIERpcmVjdG9yJyxcbiAgICBkZXBhcnRtZW50OiAnU2FsZXMnLFxuICAgIGZsc2FfY2xhc3NpZmljYXRpb246ICdleGVtcHQnLFxuICAgIHBheV9yYW5nZV9taW46IDEwMDAwMCxcbiAgICBwYXlfcmFuZ2VfbWF4OiAxNDAwMDAsXG4gICAgZW1wbG95ZWVfY291bnQ6IDJcbiAgfVxuXVxuXG5jb25zdCBtb2NrVGF4UmVjb3JkcyA9IEFycmF5LmZyb20oeyBsZW5ndGg6IDUwIH0sIChfLCBpKSA9PiB7XG4gIGNvbnN0IGZvcm1UeXBlcyA9IFsnVy0yJywgJzEwOTktTUlTQycsICcxMDk5LU5FQyddO1xuICBjb25zdCBzdGF0dXNlcyA9IFsnY29tcGxldGVkJywgJ3BlbmRpbmcnLCAnZmlsZWQnLCAndW5kZXJfcmV2aWV3J107XG4gIGNvbnN0IHRheFllYXJzID0gWycyMDI0JywgJzIwMjMnLCAnMjAyMicsICcyMDIxJ107XG4gIGNvbnN0IGVtcGxveWVlcyA9IFsnZW1wMScsICdlbXAyJywgJ2VtcDMnLCAnZW1wNCcsICdlbXA1J107XG4gIFxuICBjb25zdCBiYXNlV2FnZSA9IDQ1MDAwICsgKGkgKiAxMDAwKTtcbiAgY29uc3QgdGF4UmF0ZSA9IDAuMTggKyAoaSAlIDUpICogMC4wMjtcbiAgXG4gIHJldHVybiB7XG4gICAgaWQ6IGB0YXgke2kgKyAxfWAsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICBlbXBsb3llZV9pZDogZW1wbG95ZWVzW2kgJSBlbXBsb3llZXMubGVuZ3RoXSxcbiAgICBlbXBsb3llZV9jb2RlOiBgRU1QJHtTdHJpbmcoaSArIDEpLnBhZFN0YXJ0KDMsICcwJyl9YCxcbiAgICBmb3JtX3R5cGU6IGZvcm1UeXBlc1tpICUgZm9ybVR5cGVzLmxlbmd0aF0sXG4gICAgdGF4X3llYXI6IHRheFllYXJzW2kgJSB0YXhZZWFycy5sZW5ndGhdLFxuICAgIHN0YXR1czogc3RhdHVzZXNbaSAlIHN0YXR1c2VzLmxlbmd0aF0sXG4gICAgZmlsaW5nX3N0YXR1czogaSAlIDIgPT09IDAgPyAnc2luZ2xlJyA6ICdtYXJyaWVkJyxcbiAgICB0b3RhbF93YWdlczogYmFzZVdhZ2UsXG4gICAgZmVkZXJhbF90YXg6IE1hdGgucm91bmQoYmFzZVdhZ2UgKiB0YXhSYXRlKSxcbiAgICBzdGF0ZV90YXg6IE1hdGgucm91bmQoYmFzZVdhZ2UgKiAodGF4UmF0ZSAqIDAuNikpLFxuICAgIHRvdGFsX3RheGVzX3dpdGhoZWxkOiBNYXRoLnJvdW5kKGJhc2VXYWdlICogKHRheFJhdGUgKiAxLjYpKSxcbiAgICBjcmVhdGVkX2F0OiBgMjAyNC0ke1N0cmluZygoaSAlIDEyKSArIDEpLnBhZFN0YXJ0KDIsICcwJyl9LSR7U3RyaW5nKChpICUgMjgpICsgMSkucGFkU3RhcnQoMiwgJzAnKX1UMDA6MDA6MDBaYFxuICB9O1xufSlcblxuY29uc3QgbW9ja0JlbmVmaXRzID0gW1xuICB7XG4gICAgaWQ6ICdiZW4xJyxcbiAgICB0ZW5hbnRfaWQ6ICc5OTg4Mzc3OS05NTE3LTRjYTktYTNmOC03ZmRjNTkwNTFmMGUnLFxuICAgIGRlZHVjdGlvbl90eXBlOiAnSGVhbHRoIEluc3VyYW5jZScsXG4gICAgZW1wbG95ZWVfY29udHJpYnV0aW9uOiAxNTAsXG4gICAgZW1wbG95ZXJfY29udHJpYnV0aW9uOiA0MDAsXG4gICAgZnJlcXVlbmN5OiAnbW9udGhseScsXG4gICAgaXNfZ2FybmlzaG1lbnQ6IGZhbHNlXG4gIH0sXG4gIHtcbiAgICBpZDogJ2JlbjInLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgZGVkdWN0aW9uX3R5cGU6ICc0MDFrJyxcbiAgICBlbXBsb3llZV9jb250cmlidXRpb246IDUwMCxcbiAgICBlbXBsb3llcl9jb250cmlidXRpb246IDI1MCxcbiAgICBmcmVxdWVuY3k6ICdtb250aGx5JyxcbiAgICBpc19nYXJuaXNobWVudDogZmFsc2VcbiAgfVxuXVxuXG5jb25zdCBtb2NrQ29tcGxpYW5jZSA9IFtcbiAge1xuICAgIGlkOiAnY29tcDEnLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgY29tcGxpYW5jZV90eXBlOiAnT1NIQScsXG4gICAgc3RhdHVzOiAnY3VycmVudCcsXG4gICAgZHVlX2RhdGU6ICcyMDI0LTEyLTMxJyxcbiAgICBpc19vdmVyZHVlOiBmYWxzZVxuICB9LFxuICB7XG4gICAgaWQ6ICdjb21wMicsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICBjb21wbGlhbmNlX3R5cGU6ICdFRU8tMScsXG4gICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgZHVlX2RhdGU6ICcyMDI0LTEyLTE1JyxcbiAgICBpc19vdmVyZHVlOiBmYWxzZVxuICB9XG5dXG5cbmNvbnN0IG1vY2tXb3JrUmVxdWVzdHMgPSBbXG4gIHtcbiAgICBpZDogJ3dyMScsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB0aXRsZTogJ1dlYnNpdGUgUmVkZXNpZ24gUHJvamVjdCcsXG4gICAgZGVzY3JpcHRpb246ICdDb21wbGV0ZSByZWRlc2lnbiBvZiBjb21wYW55IHdlYnNpdGUgd2l0aCBtb2Rlcm4gVUkvVVgnLFxuICAgIGNhdGVnb3J5OiAnV2ViIERldmVsb3BtZW50JyxcbiAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgIHVyZ2VuY3k6ICdtZWRpdW0nLFxuICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyxcbiAgICBjdXN0b21lcl9pZDogJ2N1c3QxJyxcbiAgICBhc3NpZ25lZF90bzogJ2VtcDEnLFxuICAgIGVzdGltYXRlZF9ob3VyczogMTIwLFxuICAgIGFjdHVhbF9ob3VyczogNDUsXG4gICAgYnVkZ2V0OiAxNTAwMCxcbiAgICBjcmVhdGVkX2F0OiAnMjAyNC0xMS0wMVQwMDowMDowMFonXG4gIH0sXG4gIHtcbiAgICBpZDogJ3dyMicsXG4gICAgdGVuYW50X2lkOiAnOTk4ODM3NzktOTUxNy00Y2E5LWEzZjgtN2ZkYzU5MDUxZjBlJyxcbiAgICB0aXRsZTogJ01hcmtldGluZyBDYW1wYWlnbiBBbmFseXNpcycsXG4gICAgZGVzY3JpcHRpb246ICdBbmFseXplIFE0IG1hcmtldGluZyBjYW1wYWlnbiBwZXJmb3JtYW5jZSBhbmQgUk9JJyxcbiAgICBjYXRlZ29yeTogJ01hcmtldGluZycsXG4gICAgcHJpb3JpdHk6ICdtZWRpdW0nLFxuICAgIHVyZ2VuY3k6ICdsb3cnLFxuICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXG4gICAgY3VzdG9tZXJfaWQ6ICdjdXN0MicsXG4gICAgYXNzaWduZWRfdG86ICdlbXAyJyxcbiAgICBlc3RpbWF0ZWRfaG91cnM6IDQwLFxuICAgIGFjdHVhbF9ob3VyczogMzgsXG4gICAgYnVkZ2V0OiA1MDAwLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTEwLTE1VDAwOjAwOjAwWidcbiAgfVxuXVxuXG5jb25zdCBtb2NrUHJvamVjdHMgPSBbXG4gIHtcbiAgICBpZDogJ3Byb2oxJyxcbiAgICB0ZW5hbnRfaWQ6ICc5OTg4Mzc3OS05NTE3LTRjYTktYTNmOC03ZmRjNTkwNTFmMGUnLFxuICAgIHdvcmtfcmVxdWVzdF9pZDogJ3dyMScsXG4gICAgdGl0bGU6ICdXZWJzaXRlIFJlZGVzaWduIEltcGxlbWVudGF0aW9uJyxcbiAgICBkZXNjcmlwdGlvbjogJ0ltcGxlbWVudGF0aW9uIHBoYXNlIG9mIHRoZSB3ZWJzaXRlIHJlZGVzaWduIHByb2plY3QnLFxuICAgIHN0YXR1czogJ2luX3Byb2dyZXNzJyxcbiAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgIGFzc2lnbmVkX3RlYW1fbGVhZDogJ2VtcDEnLFxuICAgIGVzdGltYXRlZF9ob3VyczogMTIwLFxuICAgIGFjdHVhbF9ob3VyczogNDUsXG4gICAgYnVkZ2V0OiAxNTAwMCxcbiAgICBzdGFydF9kYXRlOiAnMjAyNC0xMS0wMScsXG4gICAgZW5kX2RhdGU6ICcyMDI0LTEyLTMxJyxcbiAgICBjb21wbGV0aW9uX3BlcmNlbnRhZ2U6IDQwLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTExLTAxVDAwOjAwOjAwWidcbiAgfSxcbiAge1xuICAgIGlkOiAncHJvajInLFxuICAgIHRlbmFudF9pZDogJzk5ODgzNzc5LTk1MTctNGNhOS1hM2Y4LTdmZGM1OTA1MWYwZScsXG4gICAgd29ya19yZXF1ZXN0X2lkOiAnd3IyJyxcbiAgICB0aXRsZTogJ1E0IE1hcmtldGluZyBBbmFseXNpcycsXG4gICAgZGVzY3JpcHRpb246ICdDb21wbGV0ZSBhbmFseXNpcyBvZiBRNCBtYXJrZXRpbmcgY2FtcGFpZ25zJyxcbiAgICBzdGF0dXM6ICdjb21wbGV0ZWQnLFxuICAgIHByaW9yaXR5OiAnbWVkaXVtJyxcbiAgICBhc3NpZ25lZF90ZWFtX2xlYWQ6ICdlbXAyJyxcbiAgICBlc3RpbWF0ZWRfaG91cnM6IDQwLFxuICAgIGFjdHVhbF9ob3VyczogMzgsXG4gICAgYnVkZ2V0OiA1MDAwLFxuICAgIHN0YXJ0X2RhdGU6ICcyMDI0LTEwLTE1JyxcbiAgICBlbmRfZGF0ZTogJzIwMjQtMTEtMTUnLFxuICAgIGNvbXBsZXRpb25fcGVyY2VudGFnZTogMTAwLFxuICAgIGNyZWF0ZWRfYXQ6ICcyMDI0LTEwLTE1VDAwOjAwOjAwWidcbiAgfVxuXVxuXG4vLyBDcmVhdGUgbW9jayBTdXBhYmFzZSBjbGllbnQgZm9yIGRlbW8gbW9kZVxuY29uc3QgY3JlYXRlTW9ja1N1cGFiYXNlQ2xpZW50ID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIGZyb206ICh0YWJsZTogc3RyaW5nKSA9PiAoe1xuICAgICAgc2VsZWN0OiAoY29sdW1ucz86IHN0cmluZykgPT4gKHtcbiAgICAgICAgZXE6IChjb2x1bW46IHN0cmluZywgdmFsdWU6IGFueSkgPT4gKHtcbiAgICAgICAgICBvcmRlcjogKGNvbHVtbjogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiAoe1xuICAgICAgICAgICAgbGltaXQ6IChsaW1pdDogbnVtYmVyKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBnZXRNb2NrRGF0YSh0YWJsZSksIGVycm9yOiBudWxsIH0pLFxuICAgICAgICAgICAgdGhlbjogKHJlc29sdmU6IGFueSkgPT4gcmVzb2x2ZSh7IGRhdGE6IGdldE1vY2tEYXRhKHRhYmxlKSwgZXJyb3I6IG51bGwgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGVuOiAocmVzb2x2ZTogYW55KSA9PiByZXNvbHZlKHsgZGF0YTogZ2V0TW9ja0RhdGEodGFibGUpLCBlcnJvcjogbnVsbCB9KVxuICAgICAgICB9KSxcbiAgICAgICAgaW46IChjb2x1bW46IHN0cmluZywgdmFsdWVzOiBhbnlbXSkgPT4gKHtcbiAgICAgICAgICBvcmRlcjogKGNvbHVtbjogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiAoe1xuICAgICAgICAgICAgbGltaXQ6IChsaW1pdDogbnVtYmVyKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBnZXRNb2NrRGF0YSh0YWJsZSksIGVycm9yOiBudWxsIH0pLFxuICAgICAgICAgICAgdGhlbjogKHJlc29sdmU6IGFueSkgPT4gcmVzb2x2ZSh7IGRhdGE6IGdldE1vY2tEYXRhKHRhYmxlKSwgZXJyb3I6IG51bGwgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGVuOiAocmVzb2x2ZTogYW55KSA9PiByZXNvbHZlKHsgZGF0YTogZ2V0TW9ja0RhdGEodGFibGUpLCBlcnJvcjogbnVsbCB9KVxuICAgICAgICB9KSxcbiAgICAgICAgb3I6IChjb25kaXRpb246IHN0cmluZykgPT4gKHtcbiAgICAgICAgICBvcmRlcjogKGNvbHVtbjogc3RyaW5nLCBvcHRpb25zPzogYW55KSA9PiAoe1xuICAgICAgICAgICAgbGltaXQ6IChsaW1pdDogbnVtYmVyKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBnZXRNb2NrRGF0YSh0YWJsZSksIGVycm9yOiBudWxsIH0pLFxuICAgICAgICAgICAgdGhlbjogKHJlc29sdmU6IGFueSkgPT4gcmVzb2x2ZSh7IGRhdGE6IGdldE1vY2tEYXRhKHRhYmxlKSwgZXJyb3I6IG51bGwgfSlcbiAgICAgICAgICB9KSxcbiAgICAgICAgICB0aGVuOiAocmVzb2x2ZTogYW55KSA9PiByZXNvbHZlKHsgZGF0YTogZ2V0TW9ja0RhdGEodGFibGUpLCBlcnJvcjogbnVsbCB9KVxuICAgICAgICB9KSxcbiAgICAgICAgb3JkZXI6IChjb2x1bW46IHN0cmluZywgb3B0aW9ucz86IGFueSkgPT4gKHtcbiAgICAgICAgICB0aGVuOiAocmVzb2x2ZTogYW55KSA9PiByZXNvbHZlKHsgZGF0YTogZ2V0TW9ja0RhdGEodGFibGUpLCBlcnJvcjogbnVsbCB9KVxuICAgICAgICB9KSxcbiAgICAgICAgdGhlbjogKHJlc29sdmU6IGFueSkgPT4gcmVzb2x2ZSh7IGRhdGE6IGdldE1vY2tEYXRhKHRhYmxlKSwgZXJyb3I6IG51bGwgfSlcbiAgICAgIH0pLFxuICAgICAgaW5zZXJ0OiAoZGF0YTogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhLCBlcnJvcjogbnVsbCB9KSxcbiAgICAgIHVwZGF0ZTogKGRhdGE6IGFueSkgPT4gKHtcbiAgICAgICAgZXE6IChjb2x1bW46IHN0cmluZywgdmFsdWU6IGFueSkgPT4gUHJvbWlzZS5yZXNvbHZlKHsgZGF0YSwgZXJyb3I6IG51bGwgfSlcbiAgICAgIH0pLFxuICAgICAgZGVsZXRlOiAoKSA9PiAoe1xuICAgICAgICBlcTogKGNvbHVtbjogc3RyaW5nLCB2YWx1ZTogYW55KSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiBudWxsLCBlcnJvcjogbnVsbCB9KVxuICAgICAgfSlcbiAgICB9KSxcbiAgICBhdXRoOiB7XG4gICAgICBnZXRTZXNzaW9uOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoeyBkYXRhOiB7IHNlc3Npb246IG51bGwgfSwgZXJyb3I6IG51bGwgfSksXG4gICAgICBvbkF1dGhTdGF0ZUNoYW5nZTogKCkgPT4gKHsgZGF0YTogeyBzdWJzY3JpcHRpb246IHsgdW5zdWJzY3JpYmU6ICgpID0+IHt9IH0gfSB9KVxuICAgIH1cbiAgfVxufVxuXG5jb25zdCBnZXRNb2NrRGF0YSA9ICh0YWJsZTogc3RyaW5nKSA9PiB7XG4gIHN3aXRjaCAodGFibGUpIHtcbiAgICBjYXNlICdwcm9maWxlcyc6XG4gICAgICByZXR1cm4gbW9ja1VzZXJzXG4gICAgY2FzZSAndGVuYW50cyc6XG4gICAgICByZXR1cm4gbW9ja1RlbmFudHNcbiAgICBjYXNlICd1c2VyX2ludml0YXRpb25zJzpcbiAgICAgIHJldHVybiBtb2NrSW52aXRhdGlvbnNcbiAgICBjYXNlICdhZG1pbl9ub3RpZmljYXRpb25zJzpcbiAgICAgIHJldHVybiBtb2NrTm90aWZpY2F0aW9uc1xuICAgIGNhc2UgJ2VtcGxveWVlX2NvbXByZWhlbnNpdmVfcmVwb3J0JzpcbiAgICAgIHJldHVybiBtb2NrRW1wbG95ZWVSZXBvcnRzXG4gICAgY2FzZSAncGF5X3N0YXRlbWVudHNfY29tcHJlaGVuc2l2ZV9yZXBvcnQnOlxuICAgICAgcmV0dXJuIG1vY2tQYXlTdGF0ZW1lbnRzXG4gICAgY2FzZSAndGltZWNhcmRzX2NvbXByZWhlbnNpdmVfcmVwb3J0JzpcbiAgICAgIHJldHVybiBtb2NrVGltZWNhcmRzXG4gICAgY2FzZSAndGltZWNhcmRzJzpcbiAgICAgIHJldHVybiBtb2NrVGltZWNhcmRzXG4gICAgY2FzZSAnam9ic19jb21wcmVoZW5zaXZlX3JlcG9ydCc6XG4gICAgICByZXR1cm4gbW9ja0pvYnNcbiAgICBjYXNlICd0YXhfcmVjb3Jkc19jb21wcmVoZW5zaXZlX3JlcG9ydCc6XG4gICAgICByZXR1cm4gbW9ja1RheFJlY29yZHNcbiAgICBjYXNlICd0YXhfcmVjb3Jkcyc6XG4gICAgICByZXR1cm4gbW9ja1RheFJlY29yZHNcbiAgICBjYXNlICdiZW5lZml0c19kZWR1Y3Rpb25zX2NvbXByZWhlbnNpdmVfcmVwb3J0JzpcbiAgICAgIHJldHVybiBtb2NrQmVuZWZpdHNcbiAgICBjYXNlICdjb21wbGlhbmNlX3JlY29yZHNfY29tcHJlaGVuc2l2ZV9yZXBvcnQnOlxuICAgICAgcmV0dXJuIG1vY2tDb21wbGlhbmNlXG4gICAgY2FzZSAnd29ya19yZXF1ZXN0cyc6XG4gICAgICByZXR1cm4gbW9ja1dvcmtSZXF1ZXN0c1xuICAgIGNhc2UgJ3Byb2plY3RzJzpcbiAgICAgIHJldHVybiBtb2NrUHJvamVjdHNcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFtdXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gaXNEZW1vTW9kZSA/IGNyZWF0ZU1vY2tTdXBhYmFzZUNsaWVudCgpIGFzIGFueSA6IGNyZWF0ZUNsaWVudChzdXBhYmFzZVVybCwgc3VwYWJhc2VBbm9uS2V5KVxuXG4vLyBEYXRhYmFzZSB0eXBlc1xuZXhwb3J0IGludGVyZmFjZSBXb3JrUmVxdWVzdCB7XG4gIGlkOiBzdHJpbmdcbiAgdGVuYW50X2lkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbjogc3RyaW5nXG4gIGNhdGVnb3J5OiBzdHJpbmdcbiAgcHJpb3JpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnXG4gIHVyZ2VuY3k6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAndXJnZW50J1xuICBzdGF0dXM6ICdzdWJtaXR0ZWQnIHwgJ3VuZGVyX3JldmlldycgfCAnYXBwcm92ZWQnIHwgJ3JlamVjdGVkJyB8ICdzY2hlZHVsZWQnIHwgJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ2NhbmNlbGxlZCdcbiAgY3VzdG9tZXJfaWQ6IHN0cmluZ1xuICBhc3NpZ25lZF90bz86IHN0cmluZ1xuICBlc3RpbWF0ZWRfaG91cnM/OiBudW1iZXJcbiAgYWN0dWFsX2hvdXJzOiBudW1iZXJcbiAgYnVkZ2V0PzogbnVtYmVyXG4gIHJlcXVpcmVkX2NvbXBsZXRpb25fZGF0ZT86IHN0cmluZ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbiAgdXBkYXRlZF9hdDogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvamVjdCB7XG4gIGlkOiBzdHJpbmdcbiAgdGVuYW50X2lkOiBzdHJpbmdcbiAgd29ya19yZXF1ZXN0X2lkOiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IHN0cmluZ1xuICBzdGF0dXM6ICdzY2hlZHVsZWQnIHwgJ2luX3Byb2dyZXNzJyB8ICdjb21wbGV0ZWQnIHwgJ29uX2hvbGQnIHwgJ2NhbmNlbGxlZCdcbiAgcHJpb3JpdHk6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnXG4gIGFzc2lnbmVkX3RlYW1fbGVhZDogc3RyaW5nXG4gIGVzdGltYXRlZF9ob3VyczogbnVtYmVyXG4gIGFjdHVhbF9ob3VyczogbnVtYmVyXG4gIGJ1ZGdldD86IG51bWJlclxuICBzdGFydF9kYXRlOiBzdHJpbmdcbiAgZW5kX2RhdGU6IHN0cmluZ1xuICBjb21wbGV0aW9uX3BlcmNlbnRhZ2U6IG51bWJlclxuICBjbGllbnRfc2F0aXNmYWN0aW9uX3Njb3JlPzogbnVtYmVyXG4gIG9uX3RpbWVfZGVsaXZlcnk/OiBib29sZWFuXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xuICB1cGRhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZW5hbnQge1xuICBpZDogc3RyaW5nXG4gIGNvbXBhbnlfbmFtZTogc3RyaW5nXG4gIHN1YmRvbWFpbj86IHN0cmluZ1xuICBpbmR1c3RyeT86IHN0cmluZ1xuICBzdGF0dXM6ICdhY3RpdmUnIHwgJ3RyaWFsJyB8ICdzdXNwZW5kZWQnIHwgJ2NhbmNlbGxlZCdcbiAgc3Vic2NyaXB0aW9uX3BsYW46ICd0cmlhbCcgfCAncHJvZmVzc2lvbmFsJyB8ICdlbnRlcnByaXNlJ1xuICBjcmVhdGVkX2F0OiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcbiAgaWQ6IHN0cmluZ1xuICBlbWFpbDogc3RyaW5nXG4gIGZpcnN0X25hbWU6IHN0cmluZ1xuICBsYXN0X25hbWU6IHN0cmluZ1xuICByb2xlOiAnaG9zdF9hZG1pbicgfCAncHJvZ3JhbV9tYW5hZ2VyJyB8ICdjbGllbnRfYWRtaW4nIHwgJ2NsaWVudF91c2VyJ1xuICB0ZW5hbnRfaWQ/OiBzdHJpbmdcbiAgaXNfYWN0aXZlOiBib29sZWFuXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xufVxuXG4vLyBFeHRlbmRlZCBVc2VyIGludGVyZmFjZSBmb3IgdXNlciBtYW5hZ2VtZW50XG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuZGVkVXNlciB7XG4gIGlkOiBzdHJpbmdcbiAgZW1haWw6IHN0cmluZ1xuICBmdWxsX25hbWU6IHN0cmluZ1xuICBwaG9uZT86IHN0cmluZ1xuICBkZXBhcnRtZW50Pzogc3RyaW5nXG4gIGpvYl90aXRsZT86IHN0cmluZ1xuICByb2xlOiBzdHJpbmdcbiAgcm9sZV9sZXZlbDogc3RyaW5nXG4gIHRlbmFudF9pZDogc3RyaW5nXG4gIHRlbmFudF9uYW1lPzogc3RyaW5nXG4gIGlzX2FjdGl2ZTogYm9vbGVhblxuICBjYW5faW52aXRlX3VzZXJzOiBib29sZWFuXG4gIGNhbl9tYW5hZ2Vfc3ViX2NsaWVudHM6IGJvb2xlYW5cbiAgcGVybWlzc2lvbl9zY29wZTogc3RyaW5nXG4gIGNyZWF0ZWRfYXQ6IHN0cmluZ1xuICB1cGRhdGVkX2F0OiBzdHJpbmdcbiAgbGFzdF9sb2dpbj86IHN0cmluZ1xufVxuXG4vLyBVc2VyIGNyZWF0aW9uIGRhdGEgaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJDcmVhdGlvbkRhdGEge1xuICBlbWFpbDogc3RyaW5nXG4gIGZ1bGxfbmFtZTogc3RyaW5nXG4gIHBob25lPzogc3RyaW5nXG4gIGRlcGFydG1lbnQ/OiBzdHJpbmdcbiAgam9iX3RpdGxlPzogc3RyaW5nXG4gIHJvbGU6IHN0cmluZ1xuICByb2xlX2xldmVsOiBzdHJpbmdcbiAgdGVuYW50X2lkOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICBjYW5faW52aXRlX3VzZXJzOiBib29sZWFuXG4gIGNhbl9tYW5hZ2Vfc3ViX2NsaWVudHM6IGJvb2xlYW5cbiAgcGVybWlzc2lvbl9zY29wZTogc3RyaW5nXG59XG5cbi8vIFVzZXIgaW52aXRhdGlvbiBkYXRhIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBVc2VySW52aXRhdGlvbkRhdGEge1xuICBlbWFpbHM6IHN0cmluZ1tdXG4gIHJvbGU6IHN0cmluZ1xuICByb2xlX2xldmVsOiBzdHJpbmdcbiAgdGVuYW50X2lkOiBzdHJpbmdcbiAgbWVzc2FnZT86IHN0cmluZ1xuICBleHBpcmVzX2luX2RheXM6IG51bWJlclxufVxuXG4vLyBVc2VyIHVwZGF0ZSBkYXRhIGludGVyZmFjZVxuZXhwb3J0IGludGVyZmFjZSBVc2VyVXBkYXRlRGF0YSB7XG4gIGZ1bGxfbmFtZT86IHN0cmluZ1xuICBwaG9uZT86IHN0cmluZ1xuICBkZXBhcnRtZW50Pzogc3RyaW5nXG4gIGpvYl90aXRsZT86IHN0cmluZ1xuICByb2xlPzogc3RyaW5nXG4gIHJvbGVfbGV2ZWw/OiBzdHJpbmdcbiAgdGVuYW50X2lkPzogc3RyaW5nXG4gIGlzX2FjdGl2ZT86IGJvb2xlYW5cbiAgY2FuX2ludml0ZV91c2Vycz86IGJvb2xlYW5cbiAgY2FuX21hbmFnZV9zdWJfY2xpZW50cz86IGJvb2xlYW5cbiAgcGVybWlzc2lvbl9zY29wZT86IHN0cmluZ1xufVxuXG4vLyBDbGVhbnVwIG9wdGlvbnMgaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIENsZWFudXBPcHRpb25zIHtcbiAgZGVsZXRlSW5hY3RpdmVVc2VyczogYm9vbGVhblxuICBkZWxldGVVbmNvbmZpcm1lZFVzZXJzOiBib29sZWFuXG4gIGRlbGV0ZUV4cGlyZWRJbnZpdGVzOiBib29sZWFuXG4gIGluYWN0aXZlRGF5czogbnVtYmVyXG4gIHVuY29uZmlybWVkRGF5czogbnVtYmVyXG59XG5cbi8vIEF1dGggaGVscGVyc1xuZXhwb3J0IGNvbnN0IHNpZ25JbldpdGhSb2xlID0gYXN5bmMgKGVtYWlsOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgeyBkYXRhLCBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2UuYXV0aC5zaWduSW5XaXRoUGFzc3dvcmQoe1xuICAgIGVtYWlsLFxuICAgIHBhc3N3b3JkXG4gIH0pXG4gIFxuICBpZiAoZGF0YS51c2VyKSB7XG4gICAgLy8gR2V0IHVzZXIgcHJvZmlsZSB3aXRoIHJvbGUgYW5kIHRlbmFudFxuICAgIGNvbnN0IHsgZGF0YTogcHJvZmlsZSB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgIC5mcm9tKCd1c2VycycpXG4gICAgICAuc2VsZWN0KCdyb2xlLCB0ZW5hbnRfaWQsIGZpcnN0X25hbWUsIGxhc3RfbmFtZScpXG4gICAgICAuZXEoJ2lkJywgZGF0YS51c2VyLmlkKVxuICAgICAgLnNpbmdsZSgpXG4gICAgXG4gICAgcmV0dXJuIHsgdXNlcjogZGF0YS51c2VyLCBwcm9maWxlLCBlcnJvciB9XG4gIH1cbiAgXG4gIHJldHVybiB7IHVzZXI6IG51bGwsIHByb2ZpbGU6IG51bGwsIGVycm9yIH1cbn1cblxuZXhwb3J0IGNvbnN0IHNpZ25PdXQgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguc2lnbk91dCgpXG4gIHJldHVybiB7IGVycm9yIH1cbn1cblxuLy8gRGF0YWJhc2UgaGVscGVyc1xuZXhwb3J0IGNvbnN0IGdldEN1cnJlbnRVc2VyID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCB7IGRhdGE6IHsgdXNlciB9IH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmdldFVzZXIoKVxuICBpZiAoIXVzZXIpIHJldHVybiBudWxsXG4gIFxuICBjb25zdCB7IGRhdGE6IHByb2ZpbGUgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgLmZyb20oJ3VzZXJzJylcbiAgICAuc2VsZWN0KCcqJylcbiAgICAuZXEoJ2lkJywgdXNlci5pZClcbiAgICAuc2luZ2xlKClcbiAgXG4gIHJldHVybiB7IC4uLnVzZXIsIHByb2ZpbGUgfVxufVxuXG5cblxuLy8gVXNlciBNYW5hZ2VtZW50IE1ldGhvZHNcbmV4cG9ydCBjb25zdCB1c2VyTWFuYWdlbWVudCA9IHtcbiAgLy8gQ3JlYXRlIGEgbmV3IHVzZXIgd2l0aCBjb21wbGV0ZSBSQkFDIHNldHVwXG4gIGNyZWF0ZVVzZXI6IGFzeW5jICh1c2VyRGF0YTogVXNlckNyZWF0aW9uRGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBGaXJzdCwgY3JlYXRlIHRoZSBhdXRoIHVzZXJcbiAgICAgIGNvbnN0IHsgZGF0YTogYXV0aERhdGEsIGVycm9yOiBhdXRoRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmF1dGguYWRtaW4uY3JlYXRlVXNlcih7XG4gICAgICAgIGVtYWlsOiB1c2VyRGF0YS5lbWFpbCxcbiAgICAgICAgcGFzc3dvcmQ6IHVzZXJEYXRhLnBhc3N3b3JkLFxuICAgICAgICBlbWFpbF9jb25maXJtOiB0cnVlLFxuICAgICAgICB1c2VyX21ldGFkYXRhOiB7XG4gICAgICAgICAgZnVsbF9uYW1lOiB1c2VyRGF0YS5mdWxsX25hbWUsXG4gICAgICAgICAgcm9sZTogdXNlckRhdGEucm9sZSxcbiAgICAgICAgICByb2xlX2xldmVsOiB1c2VyRGF0YS5yb2xlX2xldmVsXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmIChhdXRoRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBhdXRoRXJyb3IubWVzc2FnZSB9XG4gICAgICB9XG5cbiAgICAgIGlmICghYXV0aERhdGEudXNlcikge1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6ICdGYWlsZWQgdG8gY3JlYXRlIHVzZXIgYWNjb3VudCcgfVxuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgdGhlIHVzZXIgcHJvZmlsZVxuICAgICAgY29uc3QgeyBlcnJvcjogcHJvZmlsZUVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncHJvZmlsZXMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICBpZDogYXV0aERhdGEudXNlci5pZCxcbiAgICAgICAgICBlbWFpbDogdXNlckRhdGEuZW1haWwsXG4gICAgICAgICAgZnVsbF9uYW1lOiB1c2VyRGF0YS5mdWxsX25hbWUsXG4gICAgICAgICAgcGhvbmU6IHVzZXJEYXRhLnBob25lLFxuICAgICAgICAgIGRlcGFydG1lbnQ6IHVzZXJEYXRhLmRlcGFydG1lbnQsXG4gICAgICAgICAgam9iX3RpdGxlOiB1c2VyRGF0YS5qb2JfdGl0bGUsXG4gICAgICAgICAgcm9sZTogdXNlckRhdGEucm9sZSxcbiAgICAgICAgICByb2xlX2xldmVsOiB1c2VyRGF0YS5yb2xlX2xldmVsLFxuICAgICAgICAgIHRlbmFudF9pZDogdXNlckRhdGEudGVuYW50X2lkLFxuICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICBjYW5faW52aXRlX3VzZXJzOiB1c2VyRGF0YS5jYW5faW52aXRlX3VzZXJzLFxuICAgICAgICAgIGNhbl9tYW5hZ2Vfc3ViX2NsaWVudHM6IHVzZXJEYXRhLmNhbl9tYW5hZ2Vfc3ViX2NsaWVudHMsXG4gICAgICAgICAgcGVybWlzc2lvbl9zY29wZTogdXNlckRhdGEucGVybWlzc2lvbl9zY29wZSxcbiAgICAgICAgICBjcmVhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgdXBkYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgIH0pXG5cbiAgICAgIGlmIChwcm9maWxlRXJyb3IpIHtcbiAgICAgICAgLy8gSWYgcHJvZmlsZSBjcmVhdGlvbiBmYWlscywgY2xlYW4gdXAgdGhlIGF1dGggdXNlclxuICAgICAgICBhd2FpdCBzdXBhYmFzZS5hdXRoLmFkbWluLmRlbGV0ZVVzZXIoYXV0aERhdGEudXNlci5pZClcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBgUHJvZmlsZSBjcmVhdGlvbiBmYWlsZWQ6ICR7cHJvZmlsZUVycm9yLm1lc3NhZ2V9YCB9XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSB0ZW5hbnRfdXNlcnMgcmVjb3JkIGZvciBSQkFDXG4gICAgICBjb25zdCB7IGVycm9yOiB0ZW5hbnRVc2VyRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCd0ZW5hbnRfdXNlcnMnKVxuICAgICAgICAuaW5zZXJ0KHtcbiAgICAgICAgICB0ZW5hbnRfaWQ6IHVzZXJEYXRhLnRlbmFudF9pZCxcbiAgICAgICAgICB1c2VyX2lkOiBhdXRoRGF0YS51c2VyLmlkLFxuICAgICAgICAgIHJvbGU6IHVzZXJEYXRhLnJvbGUsXG4gICAgICAgICAgcm9sZV9sZXZlbDogdXNlckRhdGEucm9sZV9sZXZlbCxcbiAgICAgICAgICBjYW5faW52aXRlX3VzZXJzOiB1c2VyRGF0YS5jYW5faW52aXRlX3VzZXJzLFxuICAgICAgICAgIGNhbl9tYW5hZ2Vfc3ViX2NsaWVudHM6IHVzZXJEYXRhLmNhbl9tYW5hZ2Vfc3ViX2NsaWVudHMsXG4gICAgICAgICAgcGVybWlzc2lvbl9zY29wZTogdXNlckRhdGEucGVybWlzc2lvbl9zY29wZSxcbiAgICAgICAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KVxuXG4gICAgICBpZiAodGVuYW50VXNlckVycm9yKSB7XG4gICAgICAgIC8vIElmIHRlbmFudF91c2VycyBjcmVhdGlvbiBmYWlscywgY2xlYW4gdXAgYXV0aCB1c2VyIGFuZCBwcm9maWxlXG4gICAgICAgIGF3YWl0IHN1cGFiYXNlLmF1dGguYWRtaW4uZGVsZXRlVXNlcihhdXRoRGF0YS51c2VyLmlkKVxuICAgICAgICBhd2FpdCBzdXBhYmFzZS5mcm9tKCdwcm9maWxlcycpLmRlbGV0ZSgpLmVxKCdpZCcsIGF1dGhEYXRhLnVzZXIuaWQpXG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogYFRlbmFudCBhc3NpZ25tZW50IGZhaWxlZDogJHt0ZW5hbnRVc2VyRXJyb3IubWVzc2FnZX1gIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogYXV0aERhdGEudXNlciB9XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gY3JlYXRlIHVzZXInIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gSW52aXRlIHVzZXJzIHZpYSBlbWFpbFxuICBpbnZpdGVVc2VyczogYXN5bmMgKGludml0YXRpb25EYXRhOiBVc2VySW52aXRhdGlvbkRhdGEpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaW52aXRhdGlvbnMgPSBbXVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IGVtYWlsIG9mIGludml0YXRpb25EYXRhLmVtYWlscykge1xuICAgICAgICAvLyBDcmVhdGUgaW52aXRhdGlvbiByZWNvcmRcbiAgICAgICAgY29uc3QgeyBkYXRhOiBpbnZpdGF0aW9uLCBlcnJvcjogaW52aXRlRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgLmZyb20oJ3VzZXJfaW52aXRhdGlvbnMnKVxuICAgICAgICAgIC5pbnNlcnQoe1xuICAgICAgICAgICAgZW1haWwsXG4gICAgICAgICAgICByb2xlOiBpbnZpdGF0aW9uRGF0YS5yb2xlLFxuICAgICAgICAgICAgcm9sZV9sZXZlbDogaW52aXRhdGlvbkRhdGEucm9sZV9sZXZlbCxcbiAgICAgICAgICAgIHRlbmFudF9pZDogaW52aXRhdGlvbkRhdGEudGVuYW50X2lkLFxuICAgICAgICAgICAgbWVzc2FnZTogaW52aXRhdGlvbkRhdGEubWVzc2FnZSxcbiAgICAgICAgICAgIGV4cGlyZXNfYXQ6IG5ldyBEYXRlKERhdGUubm93KCkgKyBpbnZpdGF0aW9uRGF0YS5leHBpcmVzX2luX2RheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICAgY3JlYXRlZF9hdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc2VsZWN0KClcbiAgICAgICAgICAuc2luZ2xlKClcblxuICAgICAgICBpZiAoaW52aXRlRXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gY3JlYXRlIGludml0YXRpb24gZm9yICR7ZW1haWx9OmAsIGludml0ZUVycm9yKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZW5kIGludml0YXRpb24gZW1haWwgdXNpbmcgU3VwYWJhc2UgQXV0aFxuICAgICAgICBjb25zdCB7IGVycm9yOiBlbWFpbEVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmFkbWluLmludml0ZVVzZXJCeUVtYWlsKGVtYWlsLCB7XG4gICAgICAgICAgcmVkaXJlY3RUbzogYCR7d2luZG93LmxvY2F0aW9uLm9yaWdpbn0vYWNjZXB0LWludml0YXRpb24/dG9rZW49JHtpbnZpdGF0aW9uLmlkfWAsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgcm9sZTogaW52aXRhdGlvbkRhdGEucm9sZSxcbiAgICAgICAgICAgIHJvbGVfbGV2ZWw6IGludml0YXRpb25EYXRhLnJvbGVfbGV2ZWwsXG4gICAgICAgICAgICB0ZW5hbnRfaWQ6IGludml0YXRpb25EYXRhLnRlbmFudF9pZCxcbiAgICAgICAgICAgIGludml0YXRpb25faWQ6IGludml0YXRpb24uaWRcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGVtYWlsRXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gc2VuZCBpbnZpdGF0aW9uIGVtYWlsIHRvICR7ZW1haWx9OmAsIGVtYWlsRXJyb3IpXG4gICAgICAgICAgLy8gTWFyayBpbnZpdGF0aW9uIGFzIGZhaWxlZFxuICAgICAgICAgIGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgICAuZnJvbSgndXNlcl9pbnZpdGF0aW9ucycpXG4gICAgICAgICAgICAudXBkYXRlKHsgc3RhdHVzOiAnZmFpbGVkJyB9KVxuICAgICAgICAgICAgLmVxKCdpZCcsIGludml0YXRpb24uaWQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW52aXRhdGlvbnMucHVzaChpbnZpdGF0aW9uKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IFxuICAgICAgICBzdWNjZXNzOiB0cnVlLCBcbiAgICAgICAgZGF0YTogeyBcbiAgICAgICAgICBzZW50OiBpbnZpdGF0aW9ucy5sZW5ndGgsIFxuICAgICAgICAgIHRvdGFsOiBpbnZpdGF0aW9uRGF0YS5lbWFpbHMubGVuZ3RoIFxuICAgICAgICB9IFxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHNlbmQgaW52aXRhdGlvbnMnIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gVXBkYXRlIHVzZXIgaW5mb3JtYXRpb25cbiAgdXBkYXRlVXNlcjogYXN5bmMgKHVzZXJJZDogc3RyaW5nLCB1cGRhdGVEYXRhOiBVc2VyVXBkYXRlRGF0YSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAuZnJvbSgncHJvZmlsZXMnKVxuICAgICAgICAudXBkYXRlKHtcbiAgICAgICAgICAuLi51cGRhdGVEYXRhLFxuICAgICAgICAgIHVwZGF0ZWRfYXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgICAgICB9KVxuICAgICAgICAuZXEoJ2lkJywgdXNlcklkKVxuXG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gdXBkYXRlIHVzZXInIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gRGVhY3RpdmF0ZSB1c2VyXG4gIGRlYWN0aXZhdGVVc2VyOiBhc3luYyAodXNlcklkOiBzdHJpbmcpID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBlcnJvciB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgLmZyb20oJ3Byb2ZpbGVzJylcbiAgICAgICAgLnVwZGF0ZSh7XG4gICAgICAgICAgaXNfYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSlcbiAgICAgICAgLmVxKCdpZCcsIHVzZXJJZClcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGRlYWN0aXZhdGUgdXNlcicgfVxuICAgIH1cbiAgfSxcblxuICAvLyBBY3RpdmF0ZSB1c2VyXG4gIGFjdGl2YXRlVXNlcjogYXN5bmMgKHVzZXJJZDogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgIC5mcm9tKCdwcm9maWxlcycpXG4gICAgICAgIC51cGRhdGUoe1xuICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICB1cGRhdGVkX2F0OiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClcbiAgICAgICAgfSlcbiAgICAgICAgLmVxKCdpZCcsIHVzZXJJZClcblxuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGFjdGl2YXRlIHVzZXInIH1cbiAgICB9XG4gIH0sXG5cbiAgLy8gUmVzZXQgdXNlciBwYXNzd29yZFxuICByZXNldFVzZXJQYXNzd29yZDogYXN5bmMgKGVtYWlsOiBzdHJpbmcsIG5ld1Bhc3N3b3JkPzogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChuZXdQYXNzd29yZCkge1xuICAgICAgICAvLyBEaXJlY3QgcGFzc3dvcmQgcmVzZXQgKGFkbWluIGZ1bmN0aW9uKVxuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLmFkbWluLnVwZGF0ZVVzZXJCeUlkKFxuICAgICAgICAgIGVtYWlsLCAvLyBUaGlzIHNob3VsZCBiZSB1c2VyIElELCBidXQgd2UnbGwgbmVlZCB0byBnZXQgaXQgZmlyc3RcbiAgICAgICAgICB7IHBhc3N3b3JkOiBuZXdQYXNzd29yZCB9XG4gICAgICAgIClcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFbWFpbC1iYXNlZCBwYXNzd29yZCByZXNldFxuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZS5hdXRoLnJlc2V0UGFzc3dvcmRGb3JFbWFpbChlbWFpbCwge1xuICAgICAgICAgIHJlZGlyZWN0VG86IGAke3dpbmRvdy5sb2NhdGlvbi5vcmlnaW59L3Jlc2V0LXBhc3N3b3JkYFxuICAgICAgICB9KVxuXG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byByZXNldCBwYXNzd29yZCcgfVxuICAgIH1cbiAgfSxcblxuICAvLyBQcmV2aWV3IGNsZWFudXAgb3BlcmF0aW9uc1xuICBwcmV2aWV3VXNlckNsZWFudXA6IGFzeW5jIChvcHRpb25zOiBDbGVhbnVwT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgaW5hY3RpdmVVc2VycyA9IDBcbiAgICAgIGxldCB1bmNvbmZpcm1lZFVzZXJzID0gMFxuICAgICAgbGV0IGV4cGlyZWRJbnZpdGVzID0gMFxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxldGVJbmFjdGl2ZVVzZXJzKSB7XG4gICAgICAgIGNvbnN0IGN1dG9mZkRhdGUgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gb3B0aW9ucy5pbmFjdGl2ZURheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpXG4gICAgICAgIGNvbnN0IHsgY291bnQgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAgLmZyb20oJ3Byb2ZpbGVzJylcbiAgICAgICAgICAuc2VsZWN0KCcqJywgeyBjb3VudDogJ2V4YWN0JywgaGVhZDogdHJ1ZSB9KVxuICAgICAgICAgIC5sdCgnbGFzdF9sb2dpbicsIGN1dG9mZkRhdGUpXG4gICAgICAgICAgLmVxKCdpc19hY3RpdmUnLCB0cnVlKVxuXG4gICAgICAgIGluYWN0aXZlVXNlcnMgPSBjb3VudCB8fCAwXG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGV0ZVVuY29uZmlybWVkVXNlcnMpIHtcbiAgICAgICAgY29uc3QgY3V0b2ZmRGF0ZSA9IG5ldyBEYXRlKERhdGUubm93KCkgLSBvcHRpb25zLnVuY29uZmlybWVkRGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKClcbiAgICAgICAgY29uc3QgeyBjb3VudCB9ID0gYXdhaXQgc3VwYWJhc2VcbiAgICAgICAgICAuZnJvbSgnYXV0aC51c2VycycpXG4gICAgICAgICAgLnNlbGVjdCgnKicsIHsgY291bnQ6ICdleGFjdCcsIGhlYWQ6IHRydWUgfSlcbiAgICAgICAgICAuaXMoJ2VtYWlsX2NvbmZpcm1lZF9hdCcsIG51bGwpXG4gICAgICAgICAgLmx0KCdjcmVhdGVkX2F0JywgY3V0b2ZmRGF0ZSlcblxuICAgICAgICB1bmNvbmZpcm1lZFVzZXJzID0gY291bnQgfHwgMFxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxldGVFeHBpcmVkSW52aXRlcykge1xuICAgICAgICBjb25zdCB7IGNvdW50IH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgIC5mcm9tKCd1c2VyX2ludml0YXRpb25zJylcbiAgICAgICAgICAuc2VsZWN0KCcqJywgeyBjb3VudDogJ2V4YWN0JywgaGVhZDogdHJ1ZSB9KVxuICAgICAgICAgIC5sdCgnZXhwaXJlc19hdCcsIG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSlcbiAgICAgICAgICAubmVxKCdzdGF0dXMnLCAnYWNjZXB0ZWQnKVxuXG4gICAgICAgIGV4cGlyZWRJbnZpdGVzID0gY291bnQgfHwgMFxuICAgICAgfVxuXG4gICAgICBjb25zdCB0b3RhbFRvRGVsZXRlID0gaW5hY3RpdmVVc2VycyArIHVuY29uZmlybWVkVXNlcnMgKyBleHBpcmVkSW52aXRlc1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgaW5hY3RpdmVVc2VycyxcbiAgICAgICAgICB1bmNvbmZpcm1lZFVzZXJzLFxuICAgICAgICAgIGV4cGlyZWRJbnZpdGVzLFxuICAgICAgICAgIHRvdGFsVG9EZWxldGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHByZXZpZXcgY2xlYW51cCcgfVxuICAgIH1cbiAgfSxcblxuICAvLyBFeGVjdXRlIGNsZWFudXAgb3BlcmF0aW9uc1xuICBleGVjdXRlVXNlckNsZWFudXA6IGFzeW5jIChvcHRpb25zOiBDbGVhbnVwT3B0aW9ucykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBsZXQgZGVsZXRlZENvdW50ID0gMFxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxldGVJbmFjdGl2ZVVzZXJzKSB7XG4gICAgICAgIGNvbnN0IGN1dG9mZkRhdGUgPSBuZXcgRGF0ZShEYXRlLm5vdygpIC0gb3B0aW9ucy5pbmFjdGl2ZURheXMgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpXG4gICAgICAgIFxuICAgICAgICAvLyBHZXQgaW5hY3RpdmUgdXNlcnNcbiAgICAgICAgY29uc3QgeyBkYXRhOiBpbmFjdGl2ZVVzZXJzIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgIC5mcm9tKCdwcm9maWxlcycpXG4gICAgICAgICAgLnNlbGVjdCgnaWQnKVxuICAgICAgICAgIC5sdCgnbGFzdF9sb2dpbicsIGN1dG9mZkRhdGUpXG4gICAgICAgICAgLmVxKCdpc19hY3RpdmUnLCB0cnVlKVxuXG4gICAgICAgIGlmIChpbmFjdGl2ZVVzZXJzICYmIGluYWN0aXZlVXNlcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIC8vIERlbGV0ZSBmcm9tIGF1dGhcbiAgICAgICAgICBmb3IgKGNvbnN0IHVzZXIgb2YgaW5hY3RpdmVVc2Vycykge1xuICAgICAgICAgICAgYXdhaXQgc3VwYWJhc2UuYXV0aC5hZG1pbi5kZWxldGVVc2VyKHVzZXIuaWQpXG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZWRDb3VudCArPSBpbmFjdGl2ZVVzZXJzLmxlbmd0aFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLmRlbGV0ZVVuY29uZmlybWVkVXNlcnMpIHtcbiAgICAgICAgY29uc3QgY3V0b2ZmRGF0ZSA9IG5ldyBEYXRlKERhdGUubm93KCkgLSBvcHRpb25zLnVuY29uZmlybWVkRGF5cyAqIDI0ICogNjAgKiA2MCAqIDEwMDApLnRvSVNPU3RyaW5nKClcbiAgICAgICAgXG4gICAgICAgIC8vIFRoaXMgd291bGQgcmVxdWlyZSBhZG1pbiBhY2Nlc3MgdG8gYXV0aC51c2VycyB0YWJsZVxuICAgICAgICAvLyBGb3Igbm93LCB3ZSdsbCBqdXN0IHJldHVybiBzdWNjZXNzXG4gICAgICAgIGNvbnNvbGUubG9nKCdVbmNvbmZpcm1lZCB1c2VycyBjbGVhbnVwIHdvdWxkIGJlIGV4ZWN1dGVkIGhlcmUnKVxuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5kZWxldGVFeHBpcmVkSW52aXRlcykge1xuICAgICAgICBjb25zdCB7IGVycm9yIH0gPSBhd2FpdCBzdXBhYmFzZVxuICAgICAgICAgIC5mcm9tKCd1c2VyX2ludml0YXRpb25zJylcbiAgICAgICAgICAuZGVsZXRlKClcbiAgICAgICAgICAubHQoJ2V4cGlyZXNfYXQnLCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpXG4gICAgICAgICAgLm5lcSgnc3RhdHVzJywgJ2FjY2VwdGVkJylcblxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gZGVsZXRlIGV4cGlyZWQgaW52aXRlczonLCBlcnJvcilcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBkYXRhOiB7IGRlbGV0ZWRDb3VudCB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBlcnJvci5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gZXhlY3V0ZSBjbGVhbnVwJyB9XG4gICAgfVxuICB9XG59XG5cblxuLy8gRXhwb3J0IHRoZSBzdGFuZGFyZCBTdXBhYmFzZSBjbGllbnRcbmV4cG9ydCB7IHN1cGFiYXNlIGFzIGRlZmF1bHQgfVxuXG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50Iiwic3VwYWJhc2VVcmwiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfVVJMIiwic3VwYWJhc2VBbm9uS2V5IiwiTkVYVF9QVUJMSUNfU1VQQUJBU0VfQU5PTl9UT0tFTiIsImlzRGVtb01vZGUiLCJtb2NrVXNlcnMiLCJpZCIsImVtYWlsIiwiZnVsbF9uYW1lIiwicGhvbmUiLCJkZXBhcnRtZW50Iiwiam9iX3RpdGxlIiwic3RhdHVzIiwiY3JlYXRlZF9hdCIsImxhc3Rfc2lnbl9pbl9hdCIsInRlbmFudF91c2VycyIsInJvbGUiLCJyb2xlX2xldmVsIiwiaXNfYWN0aXZlIiwidGVuYW50X2lkIiwiaXNfcHJpbWFyeV90ZW5hbnQiLCJyZXF1aXJlc19wYXNzd29yZF9jaGFuZ2UiLCJwZXJtaXNzaW9uX3Njb3BlIiwiY2FuX2ludml0ZV91c2VycyIsImNhbl9tYW5hZ2Vfc3ViX2NsaWVudHMiLCJ0ZW5hbnRzIiwibmFtZSIsImNvZGUiLCJtb2NrVGVuYW50cyIsInRlbmFudF90eXBlIiwidXBkYXRlZF9hdCIsIm1vY2tJbnZpdGF0aW9ucyIsImV4cGlyZXNfYXQiLCJpbnZpdGVkX2J5IiwiaW52aXRlZF9ieV9wcm9maWxlIiwibW9ja05vdGlmaWNhdGlvbnMiLCJ0eXBlIiwidGl0bGUiLCJtZXNzYWdlIiwidXNlcl9pZCIsImlzX3JlYWQiLCJkYXRhIiwibW9ja0VtcGxveWVlUmVwb3J0cyIsImZpcnN0X25hbWUiLCJsYXN0X25hbWUiLCJlbXBsb3ltZW50X3N0YXR1cyIsImhvbWVfZGVwYXJ0bWVudCIsImZsc2Ffc3RhdHVzIiwidW5pb25fc3RhdHVzIiwiZWVvX2NhdGVnb3JpZXMiLCJtb2NrUGF5U3RhdGVtZW50cyIsInBheV9kYXRlIiwiZ3Jvc3NfcGF5IiwibmV0X3BheSIsImZlZGVyYWxfdGF4X3dpdGhoZWxkIiwic3RhdGVfdGF4X3dpdGhoZWxkIiwicmVndWxhcl9ob3VycyIsIm92ZXJ0aW1lX2hvdXJzIiwibW9ja1RpbWVjYXJkcyIsInRvdGFsX2hvdXJzIiwiaG9saWRheV9ob3VycyIsImFwcHJvdmFsX3N0YXR1cyIsIndlZWtfZW5kaW5nIiwibW9ja0pvYnMiLCJmbHNhX2NsYXNzaWZpY2F0aW9uIiwicGF5X3JhbmdlX21pbiIsInBheV9yYW5nZV9tYXgiLCJlbXBsb3llZV9jb3VudCIsIm1vY2tUYXhSZWNvcmRzIiwiQXJyYXkiLCJmcm9tIiwibGVuZ3RoIiwiXyIsImkiLCJmb3JtVHlwZXMiLCJzdGF0dXNlcyIsInRheFllYXJzIiwiZW1wbG95ZWVzIiwiYmFzZVdhZ2UiLCJ0YXhSYXRlIiwiZW1wbG95ZWVfaWQiLCJlbXBsb3llZV9jb2RlIiwiU3RyaW5nIiwicGFkU3RhcnQiLCJmb3JtX3R5cGUiLCJ0YXhfeWVhciIsImZpbGluZ19zdGF0dXMiLCJ0b3RhbF93YWdlcyIsImZlZGVyYWxfdGF4IiwiTWF0aCIsInJvdW5kIiwic3RhdGVfdGF4IiwidG90YWxfdGF4ZXNfd2l0aGhlbGQiLCJtb2NrQmVuZWZpdHMiLCJkZWR1Y3Rpb25fdHlwZSIsImVtcGxveWVlX2NvbnRyaWJ1dGlvbiIsImVtcGxveWVyX2NvbnRyaWJ1dGlvbiIsImZyZXF1ZW5jeSIsImlzX2dhcm5pc2htZW50IiwibW9ja0NvbXBsaWFuY2UiLCJjb21wbGlhbmNlX3R5cGUiLCJkdWVfZGF0ZSIsImlzX292ZXJkdWUiLCJtb2NrV29ya1JlcXVlc3RzIiwiZGVzY3JpcHRpb24iLCJjYXRlZ29yeSIsInByaW9yaXR5IiwidXJnZW5jeSIsImN1c3RvbWVyX2lkIiwiYXNzaWduZWRfdG8iLCJlc3RpbWF0ZWRfaG91cnMiLCJhY3R1YWxfaG91cnMiLCJidWRnZXQiLCJtb2NrUHJvamVjdHMiLCJ3b3JrX3JlcXVlc3RfaWQiLCJhc3NpZ25lZF90ZWFtX2xlYWQiLCJzdGFydF9kYXRlIiwiZW5kX2RhdGUiLCJjb21wbGV0aW9uX3BlcmNlbnRhZ2UiLCJjcmVhdGVNb2NrU3VwYWJhc2VDbGllbnQiLCJ0YWJsZSIsInNlbGVjdCIsImNvbHVtbnMiLCJlcSIsImNvbHVtbiIsInZhbHVlIiwib3JkZXIiLCJvcHRpb25zIiwibGltaXQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldE1vY2tEYXRhIiwiZXJyb3IiLCJ0aGVuIiwiaW4iLCJ2YWx1ZXMiLCJvciIsImNvbmRpdGlvbiIsImluc2VydCIsInVwZGF0ZSIsImRlbGV0ZSIsImF1dGgiLCJnZXRTZXNzaW9uIiwic2Vzc2lvbiIsIm9uQXV0aFN0YXRlQ2hhbmdlIiwic3Vic2NyaXB0aW9uIiwidW5zdWJzY3JpYmUiLCJzdXBhYmFzZSIsInNpZ25JbldpdGhSb2xlIiwicGFzc3dvcmQiLCJzaWduSW5XaXRoUGFzc3dvcmQiLCJ1c2VyIiwicHJvZmlsZSIsInNpbmdsZSIsInNpZ25PdXQiLCJnZXRDdXJyZW50VXNlciIsImdldFVzZXIiLCJ1c2VyTWFuYWdlbWVudCIsImNyZWF0ZVVzZXIiLCJ1c2VyRGF0YSIsImF1dGhEYXRhIiwiYXV0aEVycm9yIiwiYWRtaW4iLCJlbWFpbF9jb25maXJtIiwidXNlcl9tZXRhZGF0YSIsInN1Y2Nlc3MiLCJwcm9maWxlRXJyb3IiLCJEYXRlIiwidG9JU09TdHJpbmciLCJkZWxldGVVc2VyIiwidGVuYW50VXNlckVycm9yIiwiaW52aXRlVXNlcnMiLCJpbnZpdGF0aW9uRGF0YSIsImludml0YXRpb25zIiwiZW1haWxzIiwiaW52aXRhdGlvbiIsImludml0ZUVycm9yIiwibm93IiwiZXhwaXJlc19pbl9kYXlzIiwiY29uc29sZSIsImVtYWlsRXJyb3IiLCJpbnZpdGVVc2VyQnlFbWFpbCIsInJlZGlyZWN0VG8iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsIm9yaWdpbiIsImludml0YXRpb25faWQiLCJwdXNoIiwic2VudCIsInRvdGFsIiwidXBkYXRlVXNlciIsInVzZXJJZCIsInVwZGF0ZURhdGEiLCJkZWFjdGl2YXRlVXNlciIsImFjdGl2YXRlVXNlciIsInJlc2V0VXNlclBhc3N3b3JkIiwibmV3UGFzc3dvcmQiLCJ1cGRhdGVVc2VyQnlJZCIsInJlc2V0UGFzc3dvcmRGb3JFbWFpbCIsInByZXZpZXdVc2VyQ2xlYW51cCIsImluYWN0aXZlVXNlcnMiLCJ1bmNvbmZpcm1lZFVzZXJzIiwiZXhwaXJlZEludml0ZXMiLCJkZWxldGVJbmFjdGl2ZVVzZXJzIiwiY3V0b2ZmRGF0ZSIsImluYWN0aXZlRGF5cyIsImNvdW50IiwiaGVhZCIsImx0IiwiZGVsZXRlVW5jb25maXJtZWRVc2VycyIsInVuY29uZmlybWVkRGF5cyIsImlzIiwiZGVsZXRlRXhwaXJlZEludml0ZXMiLCJuZXEiLCJ0b3RhbFRvRGVsZXRlIiwiZXhlY3V0ZVVzZXJDbGVhbnVwIiwiZGVsZXRlZENvdW50IiwibG9nIiwiZGVmYXVsdCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});