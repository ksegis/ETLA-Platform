"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/reporting/page",{

/***/ "(app-pages-browser)/./src/lib/supabase.ts":
/*!*****************************!*\
  !*** ./src/lib/supabase.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ supabase),\n/* harmony export */   getCurrentUser: () => (/* binding */ getCurrentUser),\n/* harmony export */   signInWithRole: () => (/* binding */ signInWithRole),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   userManagement: () => (/* binding */ userManagement)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\nconst supabaseUrl = \"https://your-project.supabase.co\";\nconst supabaseAnonKey = \"your_anon_token_here\";\n// Check if we're in demo mode (invalid/placeholder credentials)\nconst isDemoMode = !supabaseUrl || supabaseUrl === 'https://demo.supabase.co' || supabaseUrl.includes('placeholder') || supabaseUrl.includes('your-project') || supabaseUrl === 'https://your-project.supabase.co';\n// Mock data for demo mode\nconst mockUsers = [\n    {\n        id: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        email: 'demo@company.com',\n        full_name: 'Demo Host Admin',\n        phone: '+1-555-0101',\n        department: 'IT Administration',\n        job_title: 'System Administrator',\n        status: 'active',\n        created_at: '2024-01-01T00:00:00Z',\n        last_sign_in_at: '2024-12-01T10:00:00Z',\n        tenant_users: [\n            {\n                role: 'host_admin',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'all',\n                can_invite_users: true,\n                can_manage_sub_clients: true,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user2-id',\n        email: 'client.admin@company.com',\n        full_name: 'Client Admin User',\n        phone: '+1-555-0102',\n        department: 'Operations',\n        job_title: 'Operations Manager',\n        status: 'active',\n        created_at: '2024-01-02T00:00:00Z',\n        last_sign_in_at: '2024-11-30T15:30:00Z',\n        tenant_users: [\n            {\n                role: 'client_admin',\n                role_level: 'standard',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'tenant',\n                can_invite_users: true,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user3-id',\n        email: 'user@company.com',\n        full_name: 'Regular User',\n        phone: '+1-555-0103',\n        department: 'Finance',\n        job_title: 'Financial Analyst',\n        status: 'active',\n        created_at: '2024-01-03T00:00:00Z',\n        last_sign_in_at: '2024-11-29T09:15:00Z',\n        tenant_users: [\n            {\n                role: 'user',\n                role_level: 'standard',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'own',\n                can_invite_users: false,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user4-id',\n        email: 'manager@company.com',\n        full_name: 'Project Manager',\n        phone: '+1-555-0104',\n        department: 'Project Management',\n        job_title: 'Senior Project Manager',\n        status: 'active',\n        created_at: '2024-01-04T00:00:00Z',\n        last_sign_in_at: '2024-12-01T08:45:00Z',\n        tenant_users: [\n            {\n                role: 'project_manager',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'department',\n                can_invite_users: true,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    },\n    {\n        id: 'user5-id',\n        email: 'analyst@company.com',\n        full_name: 'Data Analyst',\n        phone: '+1-555-0105',\n        department: 'Analytics',\n        job_title: 'Senior Data Analyst',\n        status: 'active',\n        created_at: '2024-01-05T00:00:00Z',\n        last_sign_in_at: '2024-11-28T14:20:00Z',\n        tenant_users: [\n            {\n                role: 'analyst',\n                role_level: 'senior',\n                is_active: true,\n                tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n                is_primary_tenant: true,\n                requires_password_change: false,\n                permission_scope: 'department',\n                can_invite_users: false,\n                can_manage_sub_clients: false,\n                tenants: {\n                    name: 'Demo Company',\n                    code: 'DEMO'\n                }\n            }\n        ]\n    }\n];\nconst mockTenants = [\n    {\n        id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        name: 'Demo Company',\n        code: 'DEMO',\n        status: 'active',\n        tenant_type: 'enterprise',\n        is_active: true,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n    }\n];\nconst mockInvitations = [\n    {\n        id: 'invite1-id',\n        email: 'newuser@company.com',\n        full_name: 'New User',\n        role: 'user',\n        status: 'pending',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        created_at: '2024-11-25T00:00:00Z',\n        expires_at: '2024-12-25T00:00:00Z',\n        invited_by: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        tenants: {\n            name: 'Demo Company'\n        },\n        invited_by_profile: {\n            full_name: 'Demo Host Admin'\n        }\n    }\n];\nconst mockNotifications = [\n    {\n        id: 'notif1-id',\n        type: 'user_invitation',\n        title: 'New User Invitation',\n        message: 'A new user invitation has been sent to newuser@company.com',\n        user_id: 'b224935f-732f-4b09-a4a0-16492c5ae563',\n        is_read: false,\n        created_at: '2024-11-25T00:00:00Z',\n        data: {\n            email: 'newuser@company.com'\n        }\n    }\n];\n// Mock data for comprehensive reports\nconst mockEmployeeReports = [\n    {\n        id: 'emp1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'John',\n        last_name: 'Smith',\n        email: 'john.smith@company.com',\n        employment_status: 'active',\n        home_department: 'Engineering',\n        flsa_status: 'exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Professional',\n        job_title: 'Senior Software Engineer',\n        created_at: '2024-01-01T00:00:00Z'\n    },\n    {\n        id: 'emp2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'Sarah',\n        last_name: 'Johnson',\n        email: 'sarah.johnson@company.com',\n        employment_status: 'active',\n        home_department: 'Marketing',\n        flsa_status: 'non-exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Professional',\n        job_title: 'Marketing Manager',\n        created_at: '2024-01-15T00:00:00Z'\n    },\n    {\n        id: 'emp3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        first_name: 'Mike',\n        last_name: 'Davis',\n        email: 'mike.davis@company.com',\n        employment_status: 'active',\n        home_department: 'Sales',\n        flsa_status: 'exempt',\n        union_status: 'non_union',\n        eeo_categories: 'Sales',\n        job_title: 'Sales Director',\n        created_at: '2024-02-01T00:00:00Z'\n    }\n];\nconst mockPayStatements = [\n    {\n        id: 'pay1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp1',\n        pay_date: '2024-11-30',\n        gross_pay: 8500,\n        net_pay: 6200,\n        federal_tax_withheld: 1200,\n        state_tax_withheld: 400,\n        department: 'Engineering',\n        regular_hours: 80,\n        overtime_hours: 5\n    },\n    {\n        id: 'pay2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp2',\n        pay_date: '2024-11-30',\n        gross_pay: 6500,\n        net_pay: 4800,\n        federal_tax_withheld: 900,\n        state_tax_withheld: 300,\n        department: 'Marketing',\n        regular_hours: 80,\n        overtime_hours: 2\n    },\n    {\n        id: 'pay3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp3',\n        pay_date: '2024-11-30',\n        gross_pay: 9500,\n        net_pay: 6900,\n        federal_tax_withheld: 1400,\n        state_tax_withheld: 500,\n        department: 'Sales',\n        regular_hours: 80,\n        overtime_hours: 8\n    }\n];\nconst mockTimecards = [\n    {\n        id: 'time1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp1',\n        total_hours: 85,\n        regular_hours: 80,\n        overtime_hours: 5,\n        holiday_hours: 0,\n        approval_status: 'approved',\n        department: 'Engineering',\n        week_ending: '2024-11-30'\n    },\n    {\n        id: 'time2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp2',\n        total_hours: 82,\n        regular_hours: 80,\n        overtime_hours: 2,\n        holiday_hours: 0,\n        approval_status: 'approved',\n        department: 'Marketing',\n        week_ending: '2024-11-30'\n    },\n    {\n        id: 'time3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        user_id: 'emp3',\n        total_hours: 88,\n        regular_hours: 80,\n        overtime_hours: 8,\n        holiday_hours: 0,\n        approval_status: 'pending',\n        department: 'Sales',\n        week_ending: '2024-11-30'\n    }\n];\nconst mockJobs = [\n    {\n        id: 'job1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Senior Software Engineer',\n        department: 'Engineering',\n        flsa_classification: 'exempt',\n        pay_range_min: 120000,\n        pay_range_max: 160000,\n        employee_count: 5\n    },\n    {\n        id: 'job2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Marketing Manager',\n        department: 'Marketing',\n        flsa_classification: 'non-exempt',\n        pay_range_min: 70000,\n        pay_range_max: 90000,\n        employee_count: 3\n    },\n    {\n        id: 'job3',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Sales Director',\n        department: 'Sales',\n        flsa_classification: 'exempt',\n        pay_range_min: 100000,\n        pay_range_max: 140000,\n        employee_count: 2\n    }\n];\nconst mockTaxRecords = [\n    {\n        id: 'tax1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        form_type: 'W-2',\n        tax_year: '2024',\n        status: 'completed',\n        total_wages: 85000,\n        total_taxes_withheld: 15300\n    },\n    {\n        id: 'tax2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        form_type: '1099',\n        tax_year: '2024',\n        status: 'pending',\n        total_wages: 25000,\n        total_taxes_withheld: 3750\n    }\n];\nconst mockBenefits = [\n    {\n        id: 'ben1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        deduction_type: 'Health Insurance',\n        employee_contribution: 150,\n        employer_contribution: 400,\n        frequency: 'monthly',\n        is_garnishment: false\n    },\n    {\n        id: 'ben2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        deduction_type: '401k',\n        employee_contribution: 500,\n        employer_contribution: 250,\n        frequency: 'monthly',\n        is_garnishment: false\n    }\n];\nconst mockCompliance = [\n    {\n        id: 'comp1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        compliance_type: 'OSHA',\n        status: 'current',\n        due_date: '2024-12-31',\n        is_overdue: false\n    },\n    {\n        id: 'comp2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        compliance_type: 'EEO-1',\n        status: 'pending',\n        due_date: '2024-12-15',\n        is_overdue: false\n    }\n];\nconst mockWorkRequests = [\n    {\n        id: 'wr1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Website Redesign Project',\n        description: 'Complete redesign of company website with modern UI/UX',\n        category: 'Web Development',\n        priority: 'high',\n        urgency: 'medium',\n        status: 'in_progress',\n        customer_id: 'cust1',\n        assigned_to: 'emp1',\n        estimated_hours: 120,\n        actual_hours: 45,\n        budget: 15000,\n        created_at: '2024-11-01T00:00:00Z'\n    },\n    {\n        id: 'wr2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        title: 'Marketing Campaign Analysis',\n        description: 'Analyze Q4 marketing campaign performance and ROI',\n        category: 'Marketing',\n        priority: 'medium',\n        urgency: 'low',\n        status: 'completed',\n        customer_id: 'cust2',\n        assigned_to: 'emp2',\n        estimated_hours: 40,\n        actual_hours: 38,\n        budget: 5000,\n        created_at: '2024-10-15T00:00:00Z'\n    }\n];\nconst mockProjects = [\n    {\n        id: 'proj1',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        work_request_id: 'wr1',\n        title: 'Website Redesign Implementation',\n        description: 'Implementation phase of the website redesign project',\n        status: 'in_progress',\n        priority: 'high',\n        assigned_team_lead: 'emp1',\n        estimated_hours: 120,\n        actual_hours: 45,\n        budget: 15000,\n        start_date: '2024-11-01',\n        end_date: '2024-12-31',\n        completion_percentage: 40,\n        created_at: '2024-11-01T00:00:00Z'\n    },\n    {\n        id: 'proj2',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        work_request_id: 'wr2',\n        title: 'Q4 Marketing Analysis',\n        description: 'Complete analysis of Q4 marketing campaigns',\n        status: 'completed',\n        priority: 'medium',\n        assigned_team_lead: 'emp2',\n        estimated_hours: 40,\n        actual_hours: 38,\n        budget: 5000,\n        start_date: '2024-10-15',\n        end_date: '2024-11-15',\n        completion_percentage: 100,\n        created_at: '2024-10-15T00:00:00Z'\n    }\n];\n// Create mock Supabase client for demo mode\nconst createMockSupabaseClient = ()=>{\n    return {\n        from: (table)=>({\n                select: (columns)=>({\n                        eq: (column, value)=>({\n                                order: (column, options)=>({\n                                        limit: (limit)=>Promise.resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            }),\n                                        then: (resolve)=>resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            })\n                                    }),\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        in: (column, values)=>({\n                                order: (column, options)=>({\n                                        limit: (limit)=>Promise.resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            }),\n                                        then: (resolve)=>resolve({\n                                                data: getMockData(table),\n                                                error: null\n                                            })\n                                    }),\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        order: (column, options)=>({\n                                then: (resolve)=>resolve({\n                                        data: getMockData(table),\n                                        error: null\n                                    })\n                            }),\n                        then: (resolve)=>resolve({\n                                data: getMockData(table),\n                                error: null\n                            })\n                    }),\n                insert: (data)=>Promise.resolve({\n                        data,\n                        error: null\n                    }),\n                update: (data)=>({\n                        eq: (column, value)=>Promise.resolve({\n                                data,\n                                error: null\n                            })\n                    }),\n                delete: ()=>({\n                        eq: (column, value)=>Promise.resolve({\n                                data: null,\n                                error: null\n                            })\n                    })\n            }),\n        auth: {\n            getSession: ()=>Promise.resolve({\n                    data: {\n                        session: null\n                    },\n                    error: null\n                }),\n            onAuthStateChange: ()=>({\n                    data: {\n                        subscription: {\n                            unsubscribe: ()=>{}\n                        }\n                    }\n                })\n        }\n    };\n};\nconst getMockData = (table)=>{\n    switch(table){\n        case 'profiles':\n            return mockUsers;\n        case 'tenants':\n            return mockTenants;\n        case 'user_invitations':\n            return mockInvitations;\n        case 'admin_notifications':\n            return mockNotifications;\n        case 'employee_comprehensive_report':\n            return mockEmployeeReports;\n        case 'pay_statements_comprehensive_report':\n            return mockPayStatements;\n        case 'timecards_comprehensive_report':\n            return mockTimecards;\n        case 'jobs_comprehensive_report':\n            return mockJobs;\n        case 'tax_records_comprehensive_report':\n            return mockTaxRecords;\n        case 'benefits_deductions_comprehensive_report':\n            return mockBenefits;\n        case 'compliance_records_comprehensive_report':\n            return mockCompliance;\n        case 'work_requests':\n            return mockWorkRequests;\n        case 'projects':\n            return mockProjects;\n        default:\n            return [];\n    }\n};\nconst supabase = isDemoMode ? createMockSupabaseClient() : (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Auth helpers\nconst signInWithRole = async (email, password)=>{\n    const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password\n    });\n    if (data.user) {\n        // Get user profile with role and tenant\n        const { data: profile } = await supabase.from('users').select('role, tenant_id, first_name, last_name').eq('id', data.user.id).single();\n        return {\n            user: data.user,\n            profile,\n            error\n        };\n    }\n    return {\n        user: null,\n        profile: null,\n        error\n    };\n};\nconst signOut = async ()=>{\n    const { error } = await supabase.auth.signOut();\n    return {\n        error\n    };\n};\n// Database helpers\nconst getCurrentUser = async ()=>{\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) return null;\n    const { data: profile } = await supabase.from('users').select('*').eq('id', user.id).single();\n    return {\n        ...user,\n        profile\n    };\n};\n// User Management Methods\nconst userManagement = {\n    // Create a new user with complete RBAC setup\n    createUser: async (userData)=>{\n        try {\n            // First, create the auth user\n            const { data: authData, error: authError } = await supabase.auth.admin.createUser({\n                email: userData.email,\n                password: userData.password,\n                email_confirm: true,\n                user_metadata: {\n                    full_name: userData.full_name,\n                    role: userData.role,\n                    role_level: userData.role_level\n                }\n            });\n            if (authError) {\n                return {\n                    success: false,\n                    error: authError.message\n                };\n            }\n            if (!authData.user) {\n                return {\n                    success: false,\n                    error: 'Failed to create user account'\n                };\n            }\n            // Create the user profile\n            const { error: profileError } = await supabase.from('profiles').insert({\n                id: authData.user.id,\n                email: userData.email,\n                full_name: userData.full_name,\n                phone: userData.phone,\n                department: userData.department,\n                job_title: userData.job_title,\n                role: userData.role,\n                role_level: userData.role_level,\n                tenant_id: userData.tenant_id,\n                is_active: true,\n                can_invite_users: userData.can_invite_users,\n                can_manage_sub_clients: userData.can_manage_sub_clients,\n                permission_scope: userData.permission_scope,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            if (profileError) {\n                // If profile creation fails, clean up the auth user\n                await supabase.auth.admin.deleteUser(authData.user.id);\n                return {\n                    success: false,\n                    error: \"Profile creation failed: \".concat(profileError.message)\n                };\n            }\n            // Create tenant_users record for RBAC\n            const { error: tenantUserError } = await supabase.from('tenant_users').insert({\n                tenant_id: userData.tenant_id,\n                user_id: authData.user.id,\n                role: userData.role,\n                role_level: userData.role_level,\n                can_invite_users: userData.can_invite_users,\n                can_manage_sub_clients: userData.can_manage_sub_clients,\n                permission_scope: userData.permission_scope,\n                is_active: true,\n                created_at: new Date().toISOString(),\n                updated_at: new Date().toISOString()\n            });\n            if (tenantUserError) {\n                // If tenant_users creation fails, clean up auth user and profile\n                await supabase.auth.admin.deleteUser(authData.user.id);\n                await supabase.from('profiles').delete().eq('id', authData.user.id);\n                return {\n                    success: false,\n                    error: \"Tenant assignment failed: \".concat(tenantUserError.message)\n                };\n            }\n            return {\n                success: true,\n                data: authData.user\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to create user'\n            };\n        }\n    },\n    // Invite users via email\n    inviteUsers: async (invitationData)=>{\n        try {\n            const invitations = [];\n            for (const email of invitationData.emails){\n                // Create invitation record\n                const { data: invitation, error: inviteError } = await supabase.from('user_invitations').insert({\n                    email,\n                    role: invitationData.role,\n                    role_level: invitationData.role_level,\n                    tenant_id: invitationData.tenant_id,\n                    message: invitationData.message,\n                    expires_at: new Date(Date.now() + invitationData.expires_in_days * 24 * 60 * 60 * 1000).toISOString(),\n                    created_at: new Date().toISOString()\n                }).select().single();\n                if (inviteError) {\n                    console.error(\"Failed to create invitation for \".concat(email, \":\"), inviteError);\n                    continue;\n                }\n                // Send invitation email using Supabase Auth\n                const { error: emailError } = await supabase.auth.admin.inviteUserByEmail(email, {\n                    redirectTo: \"\".concat(window.location.origin, \"/accept-invitation?token=\").concat(invitation.id),\n                    data: {\n                        role: invitationData.role,\n                        role_level: invitationData.role_level,\n                        tenant_id: invitationData.tenant_id,\n                        invitation_id: invitation.id\n                    }\n                });\n                if (emailError) {\n                    console.error(\"Failed to send invitation email to \".concat(email, \":\"), emailError);\n                    // Mark invitation as failed\n                    await supabase.from('user_invitations').update({\n                        status: 'failed'\n                    }).eq('id', invitation.id);\n                } else {\n                    invitations.push(invitation);\n                }\n            }\n            return {\n                success: true,\n                data: {\n                    sent: invitations.length,\n                    total: invitationData.emails.length\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to send invitations'\n            };\n        }\n    },\n    // Update user information\n    updateUser: async (userId, updateData)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                ...updateData,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to update user'\n            };\n        }\n    },\n    // Deactivate user\n    deactivateUser: async (userId)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                is_active: false,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to deactivate user'\n            };\n        }\n    },\n    // Activate user\n    activateUser: async (userId)=>{\n        try {\n            const { error } = await supabase.from('profiles').update({\n                is_active: true,\n                updated_at: new Date().toISOString()\n            }).eq('id', userId);\n            if (error) {\n                return {\n                    success: false,\n                    error: error.message\n                };\n            }\n            return {\n                success: true\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to activate user'\n            };\n        }\n    },\n    // Reset user password\n    resetUserPassword: async (email, newPassword)=>{\n        try {\n            if (newPassword) {\n                // Direct password reset (admin function)\n                const { error } = await supabase.auth.admin.updateUserById(email, {\n                    password: newPassword\n                });\n                if (error) {\n                    return {\n                        success: false,\n                        error: error.message\n                    };\n                }\n                return {\n                    success: true\n                };\n            } else {\n                // Email-based password reset\n                const { error } = await supabase.auth.resetPasswordForEmail(email, {\n                    redirectTo: \"\".concat(window.location.origin, \"/reset-password\")\n                });\n                if (error) {\n                    return {\n                        success: false,\n                        error: error.message\n                    };\n                }\n                return {\n                    success: true\n                };\n            }\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to reset password'\n            };\n        }\n    },\n    // Preview cleanup operations\n    previewUserCleanup: async (options)=>{\n        try {\n            let inactiveUsers = 0;\n            let unconfirmedUsers = 0;\n            let expiredInvites = 0;\n            if (options.deleteInactiveUsers) {\n                const cutoffDate = new Date(Date.now() - options.inactiveDays * 24 * 60 * 60 * 1000).toISOString();\n                const { count } = await supabase.from('profiles').select('*', {\n                    count: 'exact',\n                    head: true\n                }).lt('last_login', cutoffDate).eq('is_active', true);\n                inactiveUsers = count || 0;\n            }\n            if (options.deleteUnconfirmedUsers) {\n                const cutoffDate = new Date(Date.now() - options.unconfirmedDays * 24 * 60 * 60 * 1000).toISOString();\n                const { count } = await supabase.from('auth.users').select('*', {\n                    count: 'exact',\n                    head: true\n                }).is('email_confirmed_at', null).lt('created_at', cutoffDate);\n                unconfirmedUsers = count || 0;\n            }\n            if (options.deleteExpiredInvites) {\n                const { count } = await supabase.from('user_invitations').select('*', {\n                    count: 'exact',\n                    head: true\n                }).lt('expires_at', new Date().toISOString()).neq('status', 'accepted');\n                expiredInvites = count || 0;\n            }\n            const totalToDelete = inactiveUsers + unconfirmedUsers + expiredInvites;\n            return {\n                success: true,\n                data: {\n                    inactiveUsers,\n                    unconfirmedUsers,\n                    expiredInvites,\n                    totalToDelete\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to preview cleanup'\n            };\n        }\n    },\n    // Execute cleanup operations\n    executeUserCleanup: async (options)=>{\n        try {\n            let deletedCount = 0;\n            if (options.deleteInactiveUsers) {\n                const cutoffDate = new Date(Date.now() - options.inactiveDays * 24 * 60 * 60 * 1000).toISOString();\n                // Get inactive users\n                const { data: inactiveUsers } = await supabase.from('profiles').select('id').lt('last_login', cutoffDate).eq('is_active', true);\n                if (inactiveUsers && inactiveUsers.length > 0) {\n                    // Delete from auth\n                    for (const user of inactiveUsers){\n                        await supabase.auth.admin.deleteUser(user.id);\n                    }\n                    deletedCount += inactiveUsers.length;\n                }\n            }\n            if (options.deleteUnconfirmedUsers) {\n                const cutoffDate = new Date(Date.now() - options.unconfirmedDays * 24 * 60 * 60 * 1000).toISOString();\n                // This would require admin access to auth.users table\n                // For now, we'll just return success\n                console.log('Unconfirmed users cleanup would be executed here');\n            }\n            if (options.deleteExpiredInvites) {\n                const { error } = await supabase.from('user_invitations').delete().lt('expires_at', new Date().toISOString()).neq('status', 'accepted');\n                if (error) {\n                    console.error('Failed to delete expired invites:', error);\n                }\n            }\n            return {\n                success: true,\n                data: {\n                    deletedCount\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error.message || 'Failed to execute cleanup'\n            };\n        }\n    }\n};\n// Export the standard Supabase client\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/supabase.ts\n"));

/***/ })

});