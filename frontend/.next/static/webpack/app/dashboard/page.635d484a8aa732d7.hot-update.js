"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/mock-supabase.ts":
/*!**********************************!*\
  !*** ./src/lib/mock-supabase.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mockSupabase: () => (/* binding */ mockSupabase),\n/* harmony export */   shouldUseMockData: () => (/* binding */ shouldUseMockData)\n/* harmony export */ });\n// Mock Supabase client for testing when real credentials are not available\n// Mock data\nconst mockTenants = [\n    {\n        id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        name: 'Demo Company',\n        company_name: 'Demo Company',\n        status: 'active',\n        subscription_plan: 'professional',\n        created_at: '2024-01-01T00:00:00Z'\n    }\n];\nconst mockUsers = [\n    {\n        id: '3c1028ec-3b29-4a12-a881-f153ebf9406f',\n        email: 'demo@company.com',\n        full_name: 'Demo User',\n        role: 'host_admin',\n        role_level: 'senior',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        is_active: true,\n        can_invite_users: true,\n        can_manage_sub_clients: true,\n        permission_scope: 'all',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n    },\n    {\n        id: '4d1028ec-3b29-4a12-a881-f153ebf9407f',\n        email: 'user1@company.com',\n        full_name: 'Test User 1',\n        role: 'client_admin',\n        role_level: 'mid',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        is_active: true,\n        can_invite_users: false,\n        can_manage_sub_clients: false,\n        permission_scope: 'own',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n    },\n    {\n        id: '5e1028ec-3b29-4a12-a881-f153ebf9408f',\n        email: 'user2@company.com',\n        full_name: 'Test User 2',\n        role: 'client_user',\n        role_level: 'junior',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        is_active: true,\n        can_invite_users: false,\n        can_manage_sub_clients: false,\n        permission_scope: 'own',\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z'\n    }\n];\nconst mockTenantUsers = mockUsers.map((user)=>({\n        user_id: user.id,\n        tenant_id: user.tenant_id,\n        role: user.role,\n        role_level: user.role_level,\n        is_active: user.is_active,\n        can_invite_users: user.can_invite_users,\n        can_manage_sub_clients: user.can_manage_sub_clients,\n        permission_scope: user.permission_scope,\n        created_at: user.created_at,\n        updated_at: user.updated_at,\n        profiles: {\n            id: user.id,\n            email: user.email,\n            full_name: user.full_name,\n            first_name: user.full_name.split(' ')[0],\n            last_name: user.full_name.split(' ')[1] || '',\n            phone: user.phone,\n            department: user.department,\n            job_title: user.job_title\n        }\n    }));\nconst mockInvitations = [\n    {\n        id: '1a1028ec-3b29-4a12-a881-f153ebf9401f',\n        email: 'pending@company.com',\n        full_name: 'Pending User',\n        role: 'client_user',\n        role_level: 'junior',\n        tenant_id: '99883779-9517-4ca9-a3f8-7fdc59051f0e',\n        status: 'pending',\n        expires_at: '2024-12-31T23:59:59Z',\n        created_at: '2024-01-01T00:00:00Z'\n    }\n];\nconst mockNotifications = [\n    {\n        id: '2b1028ec-3b29-4a12-a881-f153ebf9402f',\n        type: 'new_user',\n        title: 'New User Requires Assignment',\n        message: 'A new user has signed up and requires tenant assignment.',\n        is_read: false,\n        created_at: '2024-01-01T00:00:00Z'\n    }\n];\n// Mock query builder\nclass MockQueryBuilder {\n    select() {\n        let fields = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : '*';\n        this.selectFields = fields;\n        return this;\n    }\n    eq(field, value) {\n        this.whereConditions.push({\n            field,\n            operator: 'eq',\n            value\n        });\n        return this;\n    }\n    neq(field, value) {\n        this.whereConditions.push({\n            field,\n            operator: 'neq',\n            value\n        });\n        return this;\n    }\n    or(condition) {\n        // Simple mock implementation\n        return this;\n    }\n    order(field) {\n        this.orderByField = field;\n        return this;\n    }\n    limit(count) {\n        this.limitValue = count;\n        return this;\n    }\n    range(start, end) {\n        this.rangeStart = start;\n        this.rangeEnd = end;\n        return this;\n    }\n    single() {\n        return this.execute().then((result)=>{\n            var _result_data;\n            return {\n                ...result,\n                data: ((_result_data = result.data) === null || _result_data === void 0 ? void 0 : _result_data[0]) || null\n            };\n        });\n    }\n    async execute() {\n        // Simulate network delay\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        let data = [];\n        switch(this.tableName){\n            case 'tenants':\n                data = [\n                    ...mockTenants\n                ];\n                break;\n            case 'tenant_users':\n                data = [\n                    ...mockTenantUsers\n                ];\n                break;\n            case 'profiles':\n                data = [\n                    ...mockUsers\n                ];\n                break;\n            case 'user_invitations':\n                data = [\n                    ...mockInvitations\n                ];\n                break;\n            case 'admin_notifications':\n                data = [\n                    ...mockNotifications\n                ];\n                break;\n            default:\n                data = [];\n        }\n        // Apply where conditions\n        data = data.filter((item)=>{\n            return this.whereConditions.every((condition)=>{\n                const fieldValue = this.getNestedValue(item, condition.field);\n                switch(condition.operator){\n                    case 'eq':\n                        return fieldValue === condition.value;\n                    case 'neq':\n                        return fieldValue !== condition.value;\n                    default:\n                        return true;\n                }\n            });\n        });\n        // Apply range\n        const rangedData = data.slice(this.rangeStart, this.rangeEnd + 1);\n        return {\n            data: rangedData,\n            error: null,\n            count: data.length\n        };\n    }\n    getNestedValue(obj, path) {\n        return path.split('.').reduce((current, key)=>current === null || current === void 0 ? void 0 : current[key], obj);\n    }\n    // Make the query builder thenable so it can be awaited\n    then(onFulfilled, onRejected) {\n        return this.execute().then(onFulfilled, onRejected);\n    }\n    constructor(tableName){\n        this.selectFields = '*';\n        this.whereConditions = [];\n        this.orderByField = '';\n        this.limitValue = 1000;\n        this.rangeStart = 0;\n        this.rangeEnd = 1000;\n        this.tableName = tableName;\n    }\n}\n// Mock Supabase client\nconst mockSupabase = {\n    from: (tableName)=>new MockQueryBuilder(tableName),\n    auth: {\n        getUser: async ()=>({\n                data: {\n                    user: {\n                        id: '3c1028ec-3b29-4a12-a881-f153ebf9406f',\n                        email: 'demo@company.com'\n                    }\n                },\n                error: null\n            }),\n        signInWithPassword: async (param)=>{\n            let { email, password } = param;\n            return {\n                data: {\n                    user: {\n                        id: '3c1028ec-3b29-4a12-a881-f153ebf9406f',\n                        email: 'demo@company.com'\n                    }\n                },\n                error: null\n            };\n        },\n        signOut: async ()=>({\n                error: null\n            }),\n        admin: {\n            createUser: async (userData)=>({\n                    data: {\n                        user: {\n                            id: \"new-\".concat(Date.now()),\n                            email: userData.email\n                        }\n                    },\n                    error: null\n                }),\n            deleteUser: async (userId)=>({\n                    error: null\n                }),\n            updateUserById: async (userId, updates)=>({\n                    error: null\n                }),\n            inviteUserByEmail: async (email, options)=>({\n                    error: null\n                })\n        },\n        resetPasswordForEmail: async (email, options)=>({\n                error: null\n            })\n    }\n};\n// Check if we should use mock data\nconst shouldUseMockData = ()=>{\n    const supabaseUrl = \"https://your-project.supabase.co\";\n    return !supabaseUrl || supabaseUrl.includes('your-project.supabase.co') || supabaseUrl === 'https://your-project.supabase.co';\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/mock-supabase.ts\n"));

/***/ })

});